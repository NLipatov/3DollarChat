@page "/users"
@using HubInteraction.EventSubscriptionManager.UsersHub.EventTypes;
@using Limp.Client.HubInteraction.EventSubscriptionManager;
@using Limp.Client.HubInteraction.EventSubscriptionManager.UsersHub.Contract;
@using Limp.Client.HubInteraction.Handlers;
@using Limp.Client.HubInteraction;
@using Limp.Client.HubInteraction.EventSubscriptionManager;
@using ClientServerCommon.Models;
@using Limp.Client.Cryptography;
@using Limp.Client.Cryptography.KeyStorage;
@using Limp.Client.HubInteraction;
@using Limp.Client.HubInteraction.EventSubscriptionManager;
@using Limp.Client.HubInteraction.EventSubscriptionManager.UsersHub;
@using Limp.Client.HubInteraction.Handlers;
@using Limp.Client.HubInteraction.Handlers.Helpers;
@using Limp.Client.HubInteraction.Handlers.MessageDispatcherHub.AESOfferHandling;
@using Limp.Client.TopicStorage;
@using Limp.Client.Utilities;
@using LimpShared.Authentification;
@using Microsoft.AspNetCore.SignalR.Client;
@inject NavigationManager _navigationManager
@inject ICryptographyService _cryptographyService
@inject IMessageBox _messageBox
@inject IAESOfferHandler _aesOfferHandler
@using ClientServerCommon.Models.Login;
@inject IJSRuntime _jS
@inject IUsersHubSubscriptionManager _usersHubSubscriptionManager
@implements IAsyncDisposable

<PageTitle>Users Online</PageTitle>

<div style="display: flex; flex-direction: column; gap: 10px;">
    @foreach (var connection in userConnections.Where(x=>!x.ConnectionIds.Contains(myConnectionId) && x.ConnectionIds.Count > 0))
    {
        <div style="    
            display: flex;
            align-items: center;
            gap: 10px;
            padding: 10px;
            border: 1px solid;
            height: 5vh;">
            <span>@connection.Username is looking for a chat!</span>
            <button @onclick="()=>RedirectToChat(connection.Username)">Start a chat</button>
        </div>
    }
</div>

@code {
    private List<UserConnections> userConnections { get; set; } = new();
    private string myConnectionId { get; set; } = string.Empty;
    private AuthHandler? _authHubHandler;
    private UsersHandler? _usersHubHandler;
    private HubInteractor? _hubInteractor;

    private async Task RedirectToChat(string username)
    {
        _navigationManager.NavigateTo($"/user/{username}");
    }

    protected override async Task OnInitializedAsync()
    {
        _hubInteractor = new HubInteractor(_navigationManager, _jS, _messageBox, _aesOfferHandler);

        _authHubHandler = new AuthHandler(_navigationManager, _jS);
        _usersHubHandler = new UsersHandler(_navigationManager, _jS, _cryptographyService, _usersHubSubscriptionManager);

        if (String.IsNullOrWhiteSpace(await JWTHelper.GetAccessToken(_jS)))
        {
            _navigationManager.NavigateTo("login");
            return;
        }

        AuthHubSubscriptionManager.SubscribeToJWTPairRefresh(async (result) =>
        {
            JWTPair? pair = result.JWTPair;
            if (pair == null || String.IsNullOrWhiteSpace(pair.AccessToken) || String.IsNullOrWhiteSpace(pair.RefreshToken.Token))
                _navigationManager.NavigateTo("/login");

            if (result.Result == AuthResultType.Success)
            {
                await _jS.InvokeVoidAsync("localStorage.setItem", "access-token", pair!.AccessToken);
                await _jS.InvokeVoidAsync("localStorage.setItem", "refresh-token", pair!.RefreshToken.Token);
            }
        });

        _usersHubSubscriptionManager.AddHandler<string>(UserHubEventType.ConnectionIdReceived, 
        async (id) =>
        {
            myConnectionId = id;
        });

        _usersHubSubscriptionManager.AddHandler<List<UserConnections>>(UserHubEventType.ConnectedUsersListReceived, 
        async (userConnectionsList) =>
        {
            userConnections = userConnectionsList;
            StateHasChanged();
        });

        _usersHubSubscriptionManager.AddHandler<string>(UserHubEventType.MyUsernameResolved,
        async (username) =>
        {
            if (_hubInteractor != null)
            {
                await _hubInteractor.ConnectToMessageDispatcherHubAsync(cryptographyService: _cryptographyService, onOnlineUsersReceive: (userConnectionsList) =>
                {
                    userConnections = userConnectionsList;
                    StateHasChanged();
                });
            }
        });

        await _authHubHandler.ConnectAsync();
        await _usersHubHandler.ConnectAsync();
    }

    public async ValueTask DisposeAsync()
    {
        _usersHubHandler?.Dispose();
        _authHubHandler?.Dispose();
        await _hubInteractor?.DisposeAsync();
    }
}
