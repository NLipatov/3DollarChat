@using Limp.Client.Pages.Chat.Logic.MessageBuilder;
@using Limp.Client.Services.HubServices.HubServices.Implementations.MessageService
@using Limp.Client.Services.InboxService;
@inject IMessageBuilder _messageBuilder
@inject IMessageService _messageService
@inject IMessageBox _messageBox

<div class="message-input-box" @onkeydown="((e)=> HandleKeyDown(e))">
    <input @bind="messageInput" @bind:event="oninput" />
    <InputFile OnChange="OnFileInputChange"/>
    <button disabled="@(!_messageService.IsConnected())" @onclick="async () => await SendMessage()">Send</button>
</div>

@code {
    [Parameter]
    public string topicName { get; set; } = string.Empty;
    [Parameter]
    public string myUsername { get; set; } = string.Empty;
    private string messageInput { get; set; } = string.Empty;
    private List<byte[]> messageData { get; set; } = new();

    private async Task HandleKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await SendMessage();
        }
    }

    private async Task OnFileInputChange(InputFileChangeEventArgs e)
    {
        foreach (var file in e.GetMultipleFiles())
        {
            messageData.Add(await FileToBytes(file));
        }
    }

    private async Task<byte[]> FileToBytes(IBrowserFile file)
    {
        using (var s = file.OpenReadStream())
        {
            using (var ms = new MemoryStream())
            {
                await s.CopyToAsync(ms);
                return ms.ToArray();
            }
        }
    }

    private async Task SendMessage()
    {
        if (string.IsNullOrWhiteSpace(messageInput) && !messageData.Any() || string.IsNullOrWhiteSpace(topicName) || string.IsNullOrWhiteSpace(myUsername))
        {
            messageInput = string.Empty;
            return;
        }

        await _messageService.SendUserMessage(messageInput, topicName, myUsername, data: messageData.Any() ? messageData[0] : null);
        messageInput = string.Empty;
        messageData = new List<byte[]>();
    }
}
