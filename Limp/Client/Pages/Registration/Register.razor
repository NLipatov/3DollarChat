@page "/register"
@using AuthAPI.DTOs.Claims;
@using AuthAPI.DTOs.User;
@using Limp.Client.Pages.Registration.Models;
@using Limp.Shared.Models.Login;
@using Limp.Client.Utilities;
@using LimpShared.Authentification;
@using Microsoft.AspNetCore.SignalR.Client;
@using Limp.Shared.Models;
@using System.ComponentModel.DataAnnotations;
@using Limp.Client.UIComponents.SuccessOrErrorMessage;
@using Limp.Client.UIComponents.InputBoxes;
@using System.Text.RegularExpressions;
@inject IConfiguration _configuration;
@inject NavigationManager Navigation;

<PageTitle>Sign Up</PageTitle>

<div class="registration-page-content">
    <EditForm Model="@Credentials" OnValidSubmit="ValidateAsync">
        @if(lastRegisterAttemptResult.Result != LogInStatus.Success)
        {
            <div class="registration-form-header">
                <span>Create a Limp Messenger Account</span>
            </div>
            <div class="registration-form">
                <InputBox InputText="@Credentials.Username"
                          IconClass="fa-solid fa-user"
                          Placeholder="Username"
                          BindEvent="oninput"                
                          IsRequired="true"
                          OnInput="((value) => Credentials.Username = value)"/>

                <InputBox InputText="@Credentials.Password"
                          IconClass="fa-solid fa-key"
                          Placeholder="Password"
                          BindEvent="oninput"                
                          IsRequired="true"
                          Type="password"
                          OnInput="((value) => Credentials.Password = value)" />

                <InputBox InputText="@Credentials.PasswordConfirmation" 
                    IconClass="fa-solid fa-key" 
                    Placeholder="Password confirmation" 
                    BindEvent="oninput"
                    IsRequired="true"
                    Type="password"
                    OnInput="((value) => Credentials.PasswordConfirmation = value)" />

                <button class="submit-button">Submit</button>
            </div>
        }

        @if(lastRegisterAttemptResult.Result == LogInStatus.Fail)
        {
            <ResultMessage 
                IsSuccess=false
                       MessageText=@lastRegisterAttemptResult.Message />
        }
        else if (lastRegisterAttemptResult.Result == LogInStatus.Success)
        {
            <ResultMessage 
                IsSuccess=true
                MessageText="Your account has been created. You can login now."/>
        }

        <div class="validation-results">
                <DataAnnotationsValidator />
            <ValidationSummary style="
            display: flex;
            flex-direction: column;
            gap: 10px;" />
            </div>
    </EditForm>
</div>

@code {
    Credentials Credentials = new();
    private HubConnection? hubConnection;
    public bool isRegistered { get; set; } = false;
    private LogInResult lastRegisterAttemptResult { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
        .WithUrl(Navigation.ToAbsoluteUri("/authHub"))
        .Build();

        hubConnection.On<LogInResult>("OnRegister", result =>
        {
            lastRegisterAttemptResult = new LogInResult
            {
                Result = result.Result,
                Message = result.Message,
            };

            StateHasChanged();
        });

        await hubConnection.StartAsync();
    }

    async Task ValidateAsync()
    {
        if (Credentials.Password != Credentials.PasswordConfirmation)
        {
            lastRegisterAttemptResult = new LogInResult
            {
                Result = LogInStatus.Fail,
                Message = "Password does not match Password Confirmation!"
            };
        }
        else
        {
            await RegisterAsync();
        }
    }

    async Task RegisterAsync()
    {
        var data = new UserDTO()
        {
            Username = Credentials.Username,
                Password = Credentials.PasswordConfirmation,
            Claims = new List<UserClaimsDTO>
            {
                new UserClaimsDTO
                {
                    Name = "Name",
                    Value = Credentials.Username,
                }
            }
            };

        await hubConnection.SendAsync("Register", data);
    }
}