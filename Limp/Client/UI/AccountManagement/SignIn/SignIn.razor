@using EthachatShared.Models.Authentication.Models;
@using EthachatShared.Models.Authentication.Models.UserAuthentication;
@using Ethachat.Client.UI.AccountManagement.LogicHandlers
@using Ethachat.Client.UI.CommonComponents.InputForms.Login.UIForms.BaseForm
@using Ethachat.Client.UI.CommonComponents.InputForms.Login.UIForms.WebAuthn
@using ButtonType = Ethachat.Client.UI.Shared.Button.ButtonType
@inject NavigationManager NavigationManager
@inject ILoginHandler LoginHandler
@page "/signIn"

<div>
    <div class="container text-center">
        <div class="row mt-5">
            <div class="col-md-6 offset-md-3">
                <div class="card" style="min-width: 40dvw;">
                    <div class="card-header">
                        <h2 class="text-center">Sign in to your account</h2>
                    </div>
                    <div class="card-body">
                        <div class="form-group text-center">
                            <p>Choose a registration method:</p>
                            <div class="btn-group" data-toggle="buttons">
                                <label class="btn mb-3 border-dark" style=@(IsUsingWebAuthn ? "background-color: black; color: white;" : "background-color: white; color: black;")>
                                    <input @onclick=@(() => IsUsingWebAuthn = true) type="radio" name="registrationType" id="webAuthnRadio" checked=@(IsUsingWebAuthn)> Passwordless
                                </label>
                                <label
                                    style=@(IsUsingWebAuthn ? "background-color: white; color: black;" : "background-color: black; color: white;")
                                    class="btn mb-3 border-dark">
                                    <input @onclick=@(() => IsUsingWebAuthn = false) type="radio" name="registrationType" id="loginPasswordRadio" checked=@(!IsUsingWebAuthn)> With Password
                                </label>
                            </div>
                        </div>

                        @if (IsUsingWebAuthn)
                        {
                            <WebAuthnLoginForm
                                IsLoginFormVisible=@true/>
                        }
                        else
                        {
                            <BaseLoginForm
                                OnLoginEvent="async dto => await OnLogIn(dto)"
                                LoginAttemptResult="_lasttokenFetchResult"/>
                        }

                        <CustomButton
                            StyleString="width: 5rem; margin-top: 1rem;"
                            ButtonType="ButtonType.Primary"
                            OnPress=@(() => NavigationManager.NavigateTo("signup"))>
                            <ChildContext>
                                <span>Register</span>
                            </ChildContext>
                        </CustomButton>
                    </div>
                    <div class="on-login-success" style="display: none; padding: 10px;">
                        <span>Done!</span>
                        <span>
                            You can
                            <a href="/signin">
                                login
                            </a>
                            now
                        </span>
                        <CustomIcon Name="circle-check" Color="green"/>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private AuthResult? _lasttokenFetchResult = new();
    private bool IsUsingWebAuthn { get; set; } = true;

    private void HandleOnLogInResponse(AuthResult authResult)
    {
        _lasttokenFetchResult = authResult;

        if (_lasttokenFetchResult.Result != AuthResultType.Fail)
        {
            _lasttokenFetchResult.Message = "You're logged in.";
            NavigationManager.NavigateTo("/contacts");
        }
        else if (string.IsNullOrWhiteSpace(authResult.JwtPair?.AccessToken) || string.IsNullOrWhiteSpace(authResult.JwtPair?.RefreshToken?.Token))
        {
            _lasttokenFetchResult = new AuthResult
            {
                Message = "Server authentification response was invalid",
                Result = AuthResultType.Fail,
            };
        }

        StateHasChanged();
    }

    private async Task OnLogIn(UserAuthentication loggingInUser)
    {
        await LoginHandler.OnLogIn(loggingInUser, HandleOnLogInResponse);
    }

}