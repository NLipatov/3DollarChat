@using System.Text.Json;
@using System.Text;
@using AuthAPI.DTOs.Claims;
@using AuthAPI.DTOs.User;
@using System.Web;
@using Limp.Client.Utilities;
@using LimpShared.Authentification;
@using LimpShared.Models.Login;
@using Microsoft.AspNetCore.SignalR.Client;
@inject IConfiguration _configuration;
@inject IJSRuntime js
@inject NavigationManager Navigation
@page "/login"

<h3>Login</h3>

<label>
    Login
    <input required @bind=Username @bind:event="oninput" />
</label>
<label>
    Password
    <input required type="password" @bind=Password @bind:event="oninput" />
</label>

<button @onclick="LogIn">
    Login
</button>

@if (isLoggedIn && lasttokenFetchResult.Result == TokenAquisitionResult.Success)
{
    <h2>
        Logged in Succesfully!
    </h2>
}

@if (lasttokenFetchResult?.Result == TokenAquisitionResult.Fail)
{
    <h2>
        @lasttokenFetchResult.Message
    </h2>
}

@code {
    private string Username { get; set; } = string.Empty;
    private string Password { get; set; } = string.Empty;
    private bool isLoggedIn { get; set; } = false;
    private TokenFetchingResult? lasttokenFetchResult = null;
    private HubConnection? hubConnection;

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
        .WithUrl(Navigation.ToAbsoluteUri("/authHub"))
        .Build();

        hubConnection.On<TokenFetchingResult>("OnLoggingIn", async result =>
        {
            lasttokenFetchResult = result;

            if (lasttokenFetchResult.Result != TokenAquisitionResult.Fail)
            {
                await StoreTokensAsync(result);
                isLoggedIn = true;
            }
            StateHasChanged();
        });

        await hubConnection.StartAsync();
    }

    private async Task LogIn()
    {
        var data = new UserDTO()
        {
                Username = Username,
                Password = Password,
                Claims = new List<UserClaimsDTO>(),
        };

        await hubConnection.SendAsync("LogIn", data);
    }

    private async Task StoreTokensAsync(TokenFetchingResult result)
    {
        await js.InvokeVoidAsync("localStorage.setItem", "access-token", result.JWTPair.AccessToken);
        await js.InvokeVoidAsync("localStorage.setItem", "refresh-token", result.JWTPair.RefreshToken.Token);
    }

}
