@inject IUsersService usersService
@using Ethachat.Client.Services.HubServices.HubServices.Implementations.UsersService
@using EthachatShared.Models.ConnectedUsersManaging
@inherits Ethachat.Client.UI.CommonComponents.BaseComponents.BaseEventListeningComponent

<div class="user-card-container" @onclick="() => OnClickCallback()">
    <div class="user-card @(IsOnline ? "active" : "")">
        <div class="profile-picture">
            <!-- Replace this with an actual image if available -->
            <img
                src="/assets/jpg/profile-user-icon-isolated-on-white-background-eps10-free-vector.jpg"
                alt="@Username"
                class="profile-img"/>
        </div>
        <div class="contact-info">
            <span class="username">@Username</span>
            <span class="status">
                @{
                    <text>@(IsOnline ? "Online" : "Offline")</text>
                }
            </span>
        </div>
        <div class="key-info">
            @if (IsKeyReady)
            {
                <i class="bi bi-key-fill key-icon" data-bs-toggle="tooltip" title="AES key for secure communication"></i>
            }
        </div>
    </div>
</div>

@code {
    [Parameter] public string Username { get; set; }

    [Parameter] public Action OnClickCallback { get; set; }

    [Parameter] public string Style { get; set; } = string.Empty;

    [Parameter] public bool IsKeyReady { get; set; } = false;

    private UserConnectionsReport UsersOnlineMessage { get; set; } = new();

    private bool IsOnline => UsersOnlineMessage.UserConnections.FirstOrDefault(x => x.Username == Username)?.ConnectionIds.Any() ?? false;

    protected override async Task OnInitializedAsync()
    {
        await usersService.ActualizeConnectedUsersAsync();
        await base.OnInitializedAsync();
    }

    protected override void SubscribeToHubEvents()
    {
        HubServiceSubscriptionManager.AddCallback<UserConnectionsReport>(UpdateUsersList, "ReceiveOnlineUsers", ComponentId);
        base.SubscribeToHubEvents();
    }

    private void UpdateUsersList(UserConnectionsReport usersOnlineMessage)
    {
        if (UsersOnlineMessage.FormedAt < usersOnlineMessage.FormedAt)
        {
            UsersOnlineMessage = usersOnlineMessage;
            StateHasChanged();
        }
    }

}