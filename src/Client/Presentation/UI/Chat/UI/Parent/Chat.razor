@page "/{topicName?}"
@using Ethachat.Client.Services.Authentication.Handlers
@using Ethachat.Client.UI.Chat.UI.Childs.MessageInput
@using Ethachat.Client.UI.Chat.UI.Childs.ChatHeader
@using Ethachat.Client.Services.HubServices.CommonServices.SubscriptionService;
@using EthachatShared.Models.ConnectedUsersManaging;
@using Ethachat.Client.UI.Chat.UI.Childs.MessageCollectionDispaying;
@using Ethachat.Client.UI.AuthenticationChecks
@using Ethachat.Client.Services.HubServices.HubServices.Implementations.MessageService
@using Ethachat.Client.Services.HubServices.HubServices.Implementations.UsersService
@using Ethachat.Client.UI.Chat.UI.Childs.AesKeyExchangeStatusModal
@inject NavigationManager _navigationManager
@inject IMessageService _messageService
@inject IHubServiceSubscriptionManager _hubServiceSubscriptionManager
@inject IUsersService _usersService
@inject IAuthenticationHandler AuthenticationHandler
@using Ethachat.Client.UI.Shared.Callout
@using CalloutType = Ethachat.Client.UI.Shared.Callout.CalloutType
@implements IDisposable

@if (string.IsNullOrWhiteSpace(topicName))
{
    <div class="p-2">
        <CustomCallout
            CalloutType="CalloutType.Warning"
            CalloutBody="Specify a username like so: /Pavel"/>
    </div>
}
else
{
    <PageTitle>Chat with @topicName</PageTitle>

    <AuthenticatedView>
        <AuthenticatedContent>

            <ChatHeader IsOnline=@(_usersOnlineMessage.UserConnections.Select(x => x.Username).Contains(topicName))
                        PartnerName=@topicName
                        OnAESRenewal=@(async () => await _messageService.NegotiateOnAESAsync(topicName))/>

            <AesExchangeStatusModal
                PartnerUsername=@topicName
                IsPartnerOnline=@_usersOnlineMessage.UserConnections.Select(x => x.Username).Contains(topicName)/>

            <MessageList @ref=MessageListComponent
                         TargetGroup=@topicName
                         MyUsername=@myUsername/>

            <MessageInputBox MyUsername=@myUsername
                             TopicName=@topicName/>
        </AuthenticatedContent>
        <UnauthenticatedContent>
            <UnAuthorized/>
        </UnauthenticatedContent>
    </AuthenticatedView>
}

@code {
    [Parameter] public string topicName { get; set; } = string.Empty;
    [Parameter] public string myUsername { get; set; } = string.Empty;
    private Guid ComponentId { get; set; }
    private MessageList? MessageListComponent { get; set; } = new();
    private UserConnectionsReport _usersOnlineMessage { get; set; } = new();

    public void Dispose() => _hubServiceSubscriptionManager.RemoveComponentCallbacks(ComponentId);

    protected override async Task OnInitializedAsync()
    {
        //This id will be needed on dispose stage
        //On dispose stage we need to clear out all the component event subscriptions
        ComponentId = Guid.NewGuid();

        myUsername = await AuthenticationHandler.GetUsernameAsync();

        //If username was not read, ask user to re-login
        if (string.IsNullOrWhiteSpace(myUsername))
        {
            _navigationManager.NavigateTo("/signIn");
            return;
        }

        SubscribeToHubEvents();

        await _usersService.CheckIfUserOnline(topicName);
    }

    private void SubscribeToHubEvents()
    {
        _hubServiceSubscriptionManager.AddCallback<UserConnection>(OnIsUserOnlineResponse, "IsUserOnlineResponse", ComponentId);
        _hubServiceSubscriptionManager.AddCallback<UserConnectionsReport>(OnUsersOnlineUpdate, "ReceiveOnlineUsers", ComponentId);
    }

    private async Task OnIsUserOnlineResponse(UserConnection userConnection)
    {
        if (userConnection.Username == topicName)
        {
            if (userConnection.ConnectionIds.Count > 0)
            {
                _usersOnlineMessage.UserConnections = new[] { userConnection };
            }

            StateHasChanged();
        }
    }

    private void OnUsersOnlineUpdate(UserConnectionsReport usersOnlineMessage)
    {
        if (_usersOnlineMessage == null || _usersOnlineMessage.FormedAt < usersOnlineMessage.FormedAt)
        {
            _usersOnlineMessage = usersOnlineMessage;
            StateHasChanged();
        }
    }

}