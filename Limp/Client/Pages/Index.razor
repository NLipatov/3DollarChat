@page "/"
@inject NavigationManager Navigation
@inject IJSRuntime _js;
<PageTitle>Index</PageTitle>

<h1>Welcome!</h1>
<input @bind="inputValue" @bind:event="oninput"/>
<button @onclick="(() => EncryptAsync(inputValue))">
    Encrypt
</button>
<button @onclick="(() => DecryptAsync(inputValue))">
    Decrypt
</button>

@code {
    private static string PEMPublicKey { get; set; } = string.Empty;
    protected override async Task OnInitializedAsync()
    {
        await _js.InvokeVoidAsync("GenerateRSAOAEPKeyPair");
    }

    [JSInvokable]
    public static void OnPublicKeyExtracted(string publicKey)
    {
        PEMPublicKey = publicKey;
        Console.WriteLine($"Public key: {PEMPublicKey}\n");
    }

    private string inputValue { get; set; } = string.Empty;

    private async Task EncryptAsync(string message)
    {
        string encryptedMessage = await _js.InvokeAsync<string>("EncryptWithRSAPublicKey", message, PEMPublicKey);
        inputValue = encryptedMessage;
    }
    private async Task DecryptAsync(string message)
    {
        string decryptedMessage = await _js.InvokeAsync<string>("decryptMessage", inputValue);
        Console.WriteLine(decryptedMessage);
        inputValue = decryptedMessage;
    }
}