@using EthachatShared.Encryption
@using Ethachat.Client.Services.HubServices.HubServices.Implementations.MessageService
@using global::Client.Application.Cryptography.KeyStorage
@inject IMessageService MessageService
@inject IJSRuntime jSRuntime 
@inject IKeyStorage KeyStorage
@inherits Ethachat.Client.UI.CommonComponents.BaseComponents.BaseEventListeningComponent

@if (AesKey is not null)
{
    <div class="key-details">
        <span>AES-secured</span>
        <span>Key creation date: @AesKey.CreationDate.ToLocalTime().ToString("dd/MM HH:mm")</span>
    </div>
}

@code {
    [Parameter] public string PartnerUsername { get; set; } = string.Empty;
    private Key? AesKey { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await UpdateAesKey();
        await base.OnInitializedAsync();
    }

    private async Task UpdateAesKey()
    {
        AesKey = await KeyStorage.GetLastAcceptedAsync(PartnerUsername, KeyType.Aes);
        if (AesKey is null)
            await MessageService.NegotiateOnAESAsync(PartnerUsername);
    }

    protected override void SubscribeToHubEvents()
    {
        HubServiceSubscriptionManager.AddCallback<string>(OnAesKeyReady, "OnPartnerAESKeyReady", ComponentId);
        HubServiceSubscriptionManager.AddCallback<string>(OnAesUpdated, "AESUpdated", ComponentId);
    }

    private async Task OnAesKeyReady(string partnerName)
    {
        AesKey = await KeyStorage.GetLastAcceptedAsync(partnerName, KeyType.Aes);

        StateHasChanged();
    }

    private async Task OnAesUpdated(string _)
    {
        AesKey = await KeyStorage.GetLastAcceptedAsync(PartnerUsername, KeyType.Aes);
        
        StateHasChanged();
    }

}