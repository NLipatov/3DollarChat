@page "/users"
@using Limp.Client.HubConnectionManagement.ConnectionHandlers.HubInteraction.Implementations;
@using Limp.Client.HubConnectionManagement.HubObservers.Implementations.MessageHub.EventTypes;
@using Limp.Client.HubInteraction.Handlers;
@using Limp.Client.HubInteraction;
@using ClientServerCommon.Models;
@using Limp.Client.Cryptography;
@using Limp.Client.Cryptography.KeyStorage;
@using Limp.Client.HubInteraction.Handlers.Helpers;
@using Limp.Client.HubInteraction.Handlers.MessageDispatcherHub.AESOfferHandling;
@using Limp.Client.HubInteraction.HubObservers.Implementations.AuthHub;
@using Limp.Client.HubInteraction.HubObservers.Implementations.AuthHub.EventTypes;
@using Limp.Client.HubInteraction.HubObservers.Implementations.UsersHubObserver.EventTypes;
@using Limp.Client.HubInteraction.HubObservers;
@using Limp.Client.TopicStorage;
@using LimpShared.Authentification;
@using Microsoft.AspNetCore.SignalR.Client;
@using Limp.Client.UIComponents.ContactItem;
@using ClientServerCommon.Models.Login;
@using System.Collections.Concurrent;
@inject NavigationManager _navigationManager
@inject ICryptographyService _cryptographyService
@inject IMessageBox _messageBox
@inject IAESOfferHandler _aesOfferHandler
@inject IJSRuntime _jS
@inject IHubObserver<UsersHubEvent> _usersHubObserver
@inject IHubObserver<AuthHubEvent> _authHubObserver
@inject IHubObserver<MessageHubEvent> _messageDispatcherHubObserver 
@implements IAsyncDisposable

<PageTitle>Users Online</PageTitle>

<div style="padding: 0.5rem 1rem;">
    @foreach (var connection in userConnections.Where(x=>!x.ConnectionIds.Contains(myConnectionId) && x.ConnectionIds.Count > 0))
    {
        <ContactBar
            Username="@connection.Username"
            IsOnline="true"
            OnClickCallback="()=>RedirectToChat(connection.Username)"/>
    }
</div>

@code {
    private ConcurrentBag<UserConnection> userConnections { get; set; } = new();
    private string myConnectionId { get; set; } = string.Empty;
    private AuthHubInteractor? _authHubInteractor;
    private UsersHubInteractor? _usersHubInteractor;
    private MessageDispatcherHubInteractor? _messageDispatcherHubInteractor;
    private List<Guid> usersHubHandlers = new();
    private List<Guid> authHubHandlers = new();
    private List<Guid> messageDispatcherHandlers = new();
    private HubConnection? usersHubConnection;

    private async Task RedirectToChat(string username)
    {
        _navigationManager.NavigateTo($"/user/{username}");
    }

    protected override async Task OnInitializedAsync()
    {
        _authHubInteractor = new AuthHubInteractor(_navigationManager, _jS, _authHubObserver);
        _usersHubInteractor = new UsersHubInteractor(_navigationManager, _jS, _usersHubObserver);

        if (String.IsNullOrWhiteSpace(await JWTHelper.GetAccessToken(_jS)))
        {
            _navigationManager.NavigateTo("login");
            return;
        }

        usersHubHandlers.Add(_usersHubObserver.AddHandler<Func<string, Task>>(UsersHubEvent.ConnectionIdReceived,
        async (id) =>
        {
            myConnectionId = id;
        }));

        usersHubHandlers.Add(_usersHubObserver.AddHandler<Func<List<UserConnection>, Task>>(UsersHubEvent.ConnectedUsersListReceived,
        async (userConnectionsList) =>
        {
            await HandleUserConnectionsUpdate(userConnectionsList);
        }));

        usersHubHandlers.Add(_usersHubObserver.AddHandler<Func<string, Task>>(UsersHubEvent.MyUsernameResolved,
        async (username) =>
        {
            if (_messageDispatcherHubInteractor == null)
            {
                throw new ApplicationException($"{nameof(_messageDispatcherHubInteractor)} cannot be null.");
            }
            await _messageDispatcherHubInteractor.ConnectAsync();
            messageDispatcherHandlers.Add(_messageDispatcherHubObserver.AddHandler(MessageHubEvent.OnlineUsersReceived, HandleUserConnectionsUpdate));
        }));

        await _authHubInteractor.ConnectAsync();
        usersHubConnection = await _usersHubInteractor.ConnectAsync();
        _messageDispatcherHubInteractor = new MessageDispatcherHubInteractor
            (_navigationManager, 
            _jS, 
            _messageDispatcherHubObserver, 
            _cryptographyService, 
            _aesOfferHandler, 
            _messageBox, 
            usersHubConnection);
    }

    private async Task HandleUserConnectionsUpdate(List<UserConnection> updatedUserConnections)
    {
        userConnections.Clear();
        foreach (var connection in updatedUserConnections)
        {
            userConnections.Add(connection);
        }
        StateHasChanged();
    }

    public async ValueTask DisposeAsync()
    {
        _usersHubObserver.RemoveHandlers(usersHubHandlers);

        await _usersHubInteractor.DisposeAsync();
        await _authHubInteractor.DisposeAsync();
        await _messageDispatcherHubInteractor.DisposeAsync();
    }
}
