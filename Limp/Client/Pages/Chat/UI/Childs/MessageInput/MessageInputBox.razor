@using Limp.Client.Pages.Chat.Logic.MessageBuilder;
@using Limp.Client.Services.HubServices.HubServices.Implementations.MessageService
@using Limp.Client.Services.InboxService;
@using System.Text
@using Limp.Client.Cryptography.CryptoHandlers
@using Limp.Client.Cryptography.KeyStorage
@using Limp.Client.HubInteraction.Handlers.MessageDecryption
@using Limp.Client.Services.DataTransmission.PackageForming
@using LimpShared.Encryption
@using LimpShared.Models.Message.DataTransfer
@inject IMessageBuilder _messageBuilder
@inject IMessageService _messageService
@inject IMessageBox _messageBox
@inject IJSRuntime _jSRuntime
@inject IMessageDecryptor _messageDecryptor 
@inject IPackageFormerService _packageFormerService

<div class="message-input-box" @onkeydown="((e)=> OnKeyDown(e))">
    <input @bind="MessageInput" @bind:event="oninput" />
    
    <label for="fileinput" class="label-wrapper" style="align-items: center;">
        <span class="bi bi-paperclip"></span>
        <InputFile id="fileinput" @key="FileInputId" OnChange="OnFileInput" style="display: none; font-size: 0.7rem;"/>
        @if (DataFiles.Any())
        {
            @foreach (var file in DataFiles)
            {
                <span title=@file.Packages.First().FileName style="    
                        overflow: hidden;
                        max-width: 10vw;
                        white-space: nowrap;
                        text-overflow: ellipsis;">
                    @file.Packages.First().FileName
                </span>
            }
        }
    </label>
    
    <button disabled="@(!_messageService.IsConnected())" @onclick="async () => await SendMessage()">Send</button>
</div>

<Modal @ref="MaxFileSizeRestrictionModal" Title="Modal title">
    <BodyTemplate>
        Maximum file size is limited to @Math.Floor((decimal)(MaxFileSizeBytes/1024000)) MB.
    </BodyTemplate>
    <FooterTemplate>
        <Button Color="ButtonColor.Secondary" @onclick="(async ()=> await MaxFileSizeRestrictionModal.HideAsync())">Close</Button>
    </FooterTemplate>
</Modal>

@code {
    [Parameter]
    public string TopicName { get; set; } = string.Empty;
    [Parameter]
    public string MyUsername { get; set; } = string.Empty;
    private string MessageInput { get; set; } = string.Empty;
    private List<DataFile> DataFiles { get; set; } = new();
    public Guid FileInputId = Guid.NewGuid();
    private Modal MaxFileSizeRestrictionModal = default!;
    private const int MaxFileSizeBytes = 5242880;

    private async Task OnKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
            await SendMessage();
    }

    private async Task OnFileInput(InputFileChangeEventArgs e)
    {
        foreach (var file in e.GetMultipleFiles())
        {
            if (file.Size > MaxFileSizeBytes)
            {
                await MaxFileSizeRestrictionModal.ShowAsync();
                FileInputId = Guid.NewGuid();
                return;
            }
            
            var dfId = Guid.NewGuid();
            DataFiles.Add(new DataFile()
            {
                Id = dfId,
                Packages = await _packageFormerService.Split(file, 22 * 1024, dfId),
            });
        }
    }

    private async Task SendMessage()
    {
        if (string.IsNullOrWhiteSpace(MessageInput) && !DataFiles.Any() || string.IsNullOrWhiteSpace(TopicName) || string.IsNullOrWhiteSpace(MyUsername))
        {
            MessageInput = string.Empty;
            return;
        }

        if (!string.IsNullOrWhiteSpace(MessageInput))
        {
            await _messageService.SendText(MessageInput, TopicName, MyUsername);
        }
        
        if (DataFiles.Any())
        {
            var dataFilesCopy = new List<DataFile>(DataFiles);
            Task.Run(()=> _messageService.SendData(dataFilesCopy, TopicName));
            FileInputId = Guid.NewGuid();
        }
        
        MessageInput = string.Empty;
        DataFiles = new(0);
    }
}
