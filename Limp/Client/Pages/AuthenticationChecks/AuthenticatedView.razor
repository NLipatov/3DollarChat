@using Ethachat.Client.Pages.AuthenticationChecks.Stages;
@using Ethachat.Client.Services;
@using Ethachat.Client.Services.AuthenticationService.Handlers
@using Ethachat.Client.Services.HubServices.CommonServices.CallbackExecutor
@using Ethachat.Client.Services.HubServices.CommonServices.SubscriptionService
@using Ethachat.Client.Services.HubServices.HubServices.Implementations.AuthService
@using Ethachat.Client.Services.HubServices.HubServices.Implementations.MessageService
@using Ethachat.Client.Services.HubServices.HubServices.Implementations.UsersService
@using Ethachat.Client.Services.JWTReader;
@using Ethachat.Client.Services.LocalStorageService
@using EthachatShared.Models.Authentication.Models
@inject NavigationManager NavigationManager
@inject IAuthService AuthService
@inject IMessageService MessageService
@inject IUsersService UsersService
@inject ILocalStorageService LocalStorageService
@inject IAuthenticationHandler AuthenticationHandler
@inject IHubServiceSubscriptionManager HubServiceSubscriptionManager
@implements IDisposable

<div>
    @if (_isUsersHubConnectionActive is false)
    {
        <div class="p-2">
            <Callout Type="CalloutType.Warning" Heading="No connection">
                <span>Reconnecting...</span>
            </Callout>
        </div>
    }
    else
    {
        @if (_authenticationState is AuthenticationState.TokenActualisation)
        {
            <div class="d-flex flex-column align-items-center text-center">
                <p class="mt-3 mb-0">Checking if you have been authenticated</p>
            </div>
        }
        else if (_authenticationState is AuthenticationState.Authenticated)
        {
            @AuthenticatedContent
        }
        else if (_authenticationState is AuthenticationState.NotAuthenticated)
        {
            @UnauthenticatedContent
        }
    }
</div>

@code {

    [Parameter]
    public RenderFragment? AuthenticatedContent { get; set; }

    [Parameter]
    public RenderFragment? UnauthenticatedContent { get; set; }

    private bool _isUsersHubConnectionActive = false;
    private AuthenticationState _authenticationState { get; set; } = AuthenticationState.TokenActualisation;
    private Guid ComponentId { get; set; }

    public void Dispose() => HubServiceSubscriptionManager.RemoveComponentCallbacks(ComponentId);

    protected override async Task OnInitializedAsync()
    {
        _isUsersHubConnectionActive = UsersService.IsConnected();
        if (!await AuthenticationHandler.IsSetToUseAsync())
        {
            NavigationManager.NavigateTo("signin");
            return;
        }

        HubServiceSubscriptionManager
            .AddCallback<AuthResult>(HandleAuthenticationCheckResult, "OnRefreshCredentials", ComponentId);

        HubServiceSubscriptionManager
            .AddCallback<AuthResult>(HandleAuthenticationCheckResult, "OnValidateCredentials", ComponentId);

        HubServiceSubscriptionManager
            .AddCallback<bool>(isActive =>
            {
                _isUsersHubConnectionActive = isActive;
                StateHasChanged();
            }, "OnUsersHubConnectionStatusChanged", ComponentId);
        
        await ValidateCredentials();
    }

    private async Task ValidateCredentials()
    {
        await AuthenticationHandler.TriggerCredentialsValidation(await AuthService.GetHubConnectionAsync());
    }

    private async Task HandleAuthenticationCheckResult(AuthResult credentialsValidationResult)
    {
        var isAccessTokenValid = credentialsValidationResult.Result is AuthResultType.Success;
        if (isAccessTokenValid)
        {
            if (_authenticationState is not AuthenticationState.Authenticated)
            {
                _authenticationState = AuthenticationState.Authenticated;
                await MessageService.GetHubConnectionAsync();
                await UsersService.GetHubConnectionAsync();
                
                await AuthenticationHandler
                    .ExecutePostCredentialsValidation(credentialsValidationResult, await AuthService.GetHubConnectionAsync());
            }
        }
        else
        {
            _authenticationState = AuthenticationState.NotAuthenticated;
        }
        
        StateHasChanged();
    }
}