@using Limp.Client.Cryptography;
@using Limp.Client.Cryptography.KeyStorage;
@using Limp.Client.Services.HubConnectionProvider;
@using Limp.Client.Shared.NavigationBar
@using LimpShared.Encryption;
@inherits LayoutComponentBase
@inject ICryptographyService _cryptographyService
@inject IHubConnectionProvider _hubConnectionProvider

@if(isRSAGenerated)
{
    <div class="ApplicationContent">
        <NavMenu />
        <div style="width: 100%;">
            @Body
        </div>
    </div>
}
else
{
    <div class="RSACalculatingWarning">
        <p>
            Calculating an RSA key pair...
        </p>
    </div>
}

@code{
    private bool isRSAGenerated = false;

    protected override async Task OnInitializedAsync()
    {
        await _cryptographyService.GenerateRSAKeyPairAsync();
        KeysGeneratedHandler.SubscribeToRSAKeysGeneratedEvent(() =>
        {
            isRSAGenerated = true;
            StateHasChanged();
            _hubConnectionProvider.ConnectToHubs();
        });
    }
}