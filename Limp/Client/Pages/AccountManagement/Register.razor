@page "/register"
@using Limp.Client.UIComponents.InputForms.Registration
@using LimpShared.Models.Authentication.Models;
@using LimpShared.Models.Authentication.Models.UserAuthentication;
@using Microsoft.AspNetCore.SignalR.Client;
@using System.ComponentModel.DataAnnotations;
@using Limp.Client.UIComponents.SuccessOrErrorMessage;
@using System.Text.RegularExpressions;
@using ClientServerCommon
@inject IConfiguration _configuration;
@inject NavigationManager Navigation;
@implements IAsyncDisposable;

<PageTitle>Sign Up</PageTitle>

<RegistrationForm 
    OnRegisterEvent="async (dto) => await OnRegister(dto)"
    RegistrationAttemptResult="lastRegisterAttemptResult" />

@code {
    private HubConnection? hubConnection;
    private AuthResult lastRegisterAttemptResult { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
        .WithUrl(Navigation.ToAbsoluteUri("/authHub"))
        .Build();

        hubConnection.On<AuthResult>("OnRegister", result =>
        {
            lastRegisterAttemptResult = new AuthResult
            {
                Result = result.Result,
                Message = result.Result == AuthResultType.Success ? "Account has been created, you can log in now." : result.Message,
            };

            StateHasChanged();
        });

        await hubConnection.StartAsync();
    }

    async Task OnRegister(UserAuthentication newUserDTO)
    {
        if (hubConnection == null)
            throw new ApplicationException("No connection with Hub.");

        await hubConnection.SendAsync("Register", newUserDTO);
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection != null)
        {
            await hubConnection.StopAsync();
            await hubConnection.DisposeAsync();
        }
    }
}