@page "/contacts"
@using Limp.Client.Pages.Contacts.UI.Child;
@using ClientServerCommon.Models;
@using Limp.Client.Pages.Contacts.Models;
@using Limp.Client.Services.CloudKeyService;
@using Limp.Client.Services.ContactsProvider;
@using Limp.Client.Services.HubService.UsersService;
@using Limp.Client.Services.HubServices.CommonServices.SubscriptionService;
@using Limp.Client.UIComponents.ContactItem;
@inject NavigationManager _navigationManager;
@inject IContactsProvider _contactsProvider;
@inject IUsersService _usersService
@inject IHubServiceSubscriptionManager _hubServiceSubscriptionManager
@inject IJSRuntime _jSRuntime;
@inject ILocalKeyManager _localKeyManager;
@implements IDisposable

<div class="p-2" style="  
    width: 100%;
    height: 100%;
    overflow: auto;">
    <div>
        <SearchForContact 
            OnNewContactSearch="OnAddContactAttempt" />

        @if(ContactsList.Any())
        {
            <ContactsList
                OnContactRemoved="RemoveContact"
                ContactCollection="ContactsList"
                OnContactClicked="NavigateToChatWithContact"/>
        }
        else
        {
            <Callout Class="m-2" Type="CalloutType.Tip">
                <div style="display: flex; flex-direction: column;">
                    <h3>Your contact book is empty</h3>
                    <span>Add someone and start a new chat!</span>
                </div>
            </Callout>
        }
    </div>
</div>

<ConfirmContactAdditionModal 
    @ref="contactAdditionModal"
    ContactCollection="ContactsList"
    OnContactAddition="HandleContactAddition"/>


@code {
    private ConfirmContactAdditionModal? contactAdditionModal = default!;
    private List<Contact> ContactsList = new();
    private bool contactEditionMode = false;
    private Guid ComponentId { get; set; }
    private List<UserConnection> LastReceivedConnections { get; set; } = new();

    public void Dispose() => _hubServiceSubscriptionManager.RemoveComponentCallbacks(ComponentId);

    private void ToggleEditContactsMode() => contactEditionMode = !contactEditionMode;

    public void NavigateToChatWithContact(string contactUsername) => _navigationManager.NavigateTo($"user/{contactUsername}");

    private async Task RemoveContact(string username)
    {
        //Get contact out of client's browser local storage
        await _contactsProvider.RemoveContact(username, _jSRuntime);

        //If there is no one in contact book left, toggle change mode back to false automatically
        if(!(await _contactsProvider.GetContacts(_jSRuntime)).Any())
        {
            ToggleEditContactsMode();
        }

        //update displayed contacts in UI component
        await UpdateContacts();
    }

    private async Task OnAddContactAttempt(string NewContactUsername)
    {
        if (!string.IsNullOrWhiteSpace(NewContactUsername))
        {
            ContactAdditionModalDTO modalDTO = new()
                {
                    IsUserExists = true,
                    NewContactUsername = NewContactUsername
                };

            await contactAdditionModal!.ShowModalWithBodyTextAsync(modalDTO);
        }
    }

    private async Task HandleContactAddition(string username)
    {
        await _contactsProvider.AddContact(username, _jSRuntime);
        await UpdateContacts();
        await contactAdditionModal!.HideModalAsync();
    }


    protected override async Task OnInitializedAsync()
    {
        //This id will be needed on dispose stage
        //On dispose stage we need to clear out all of the component event subscriptions
        ComponentId = Guid.NewGuid();

        //Subscribing to server event of updating online users
        _hubServiceSubscriptionManager
            .AddCallback<List<UserConnection>>(UpdateContacts, "ReceiveOnlineUsers", ComponentId);

        //Actualizing list of users that currently online
        await _usersService.ActualizeConnectedUsersAsync();
    }

    private async Task UpdateContacts(List<UserConnection>? updatedUserConnections = null)
    {
        TryUpdateLastReceivedContacts(updatedUserConnections);

        List<string> contacts = await _contactsProvider.GetContacts(_jSRuntime);
        ContactsList = contacts.Select(contact =>
        new Contact
            {
                Username = contact,
                IsOnline = LastReceivedConnections.Any(x=>x.Username == contact),
                LastMessage = DateTime.UtcNow
            }
        ).ToList();

        foreach (Contact contact in ContactsList)
        {
            contact.IsKeyReady = await _localKeyManager.IsAESKeyReady(contact.Username);
        }

        StateHasChanged();
    }

    private void TryUpdateLastReceivedContacts(List<UserConnection>? userConnections = null)
    {
        if (userConnections != null)
        {
            LastReceivedConnections = userConnections;
        }
    }
}