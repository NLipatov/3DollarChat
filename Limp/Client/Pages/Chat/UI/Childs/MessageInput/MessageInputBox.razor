@using Ethachat.Client.ClientOnlyModels.ClientOnlyExtentions
@using Ethachat.Client.Pages.Chat.Logic.MessageBuilder;
@using Ethachat.Client.Services.HubServices.HubServices.Implementations.MessageService
@using Ethachat.Client.Services.InboxService;
@using System.Text
@using Ethachat.Client.ClientOnlyModels
@using Ethachat.Client.Cryptography.CryptoHandlers
@using Ethachat.Client.Cryptography.KeyStorage
@using Ethachat.Client.HubConnectionManagement.ConnectionHandlers.MessageDecryption
@using Ethachat.Client.Services.DataTransmission.PackageForming
@using Ethachat.Client.Services.HubServices.CommonServices.CallbackExecutor
@using EthachatShared.Encryption
@using EthachatShared.Models.Message
@using EthachatShared.Models.Message.DataTransfer
@inject IMessageBuilder _messageBuilder
@inject IMessageService _messageService
@inject IMessageBox _messageBox
@inject IJSRuntime _jSRuntime
@inject IMessageDecryptor _messageDecryptor 
@inject IPackageMultiplexerService PackageMultiplexerService
@inject ICallbackExecutor CallbackExecutor

<div class="message-input-box" @onkeydown="((e) => OnKeyDown(e))">
    <input @bind="MessageInput" @bind:event="oninput"/>

    <label for="fileinput" class="label-wrapper" style="align-items: center;">
        <span class="bi bi-paperclip"></span>
        <InputFile id="fileinput" @key="FileInputId" OnChange="OnFileInput" style="display: none; font-size: 0.7rem;"/>
        @if (DataFiles.Any())
        {
            @foreach (var file in DataFiles)
            {
                <span title=@file.Packages.First().FileName style="    
                        overflow: hidden;
                        max-width: 10vw;
                        white-space: nowrap;
                        text-overflow: ellipsis;">
                    @file.Packages.First().FileName
                </span>
            }
        }
    </label>

    <button disabled="@(!_messageService.IsConnected())" @onclick="async () => await SendMessage()">Send</button>
</div>

<Modal @ref="MaxFileSizeRestrictionModal" Title="Modal title">
    <BodyTemplate>
        Maximum file size is limited to @Math.Floor((decimal)(MaxFileSizeBytes / 1024000)) MB.
    </BodyTemplate>
    <FooterTemplate>
        <Button Color="ButtonColor.Secondary" @onclick="(async () => await MaxFileSizeRestrictionModal.HideAsync())">Close</Button>
    </FooterTemplate>
</Modal>

<FileEncryptionModal/>

@code {

    [Parameter]
    public string TopicName { get; set; } = string.Empty;

    [Parameter]
    public string MyUsername { get; set; } = string.Empty;

    private string MessageInput { get; set; } = string.Empty;
    private List<ClientDataFile> DataFiles { get; set; } = new();
    public Guid FileInputId = Guid.NewGuid();
    private Modal MaxFileSizeRestrictionModal = default!;
    private const long MaxFileSizeBytes = long.MaxValue;

    private async Task OnKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
            await SendMessage();
    }

    private async Task OnFileInput(InputFileChangeEventArgs e)
    {
        if (e.File.Size > MaxFileSizeBytes)
        {
            await MaxFileSizeRestrictionModal.ShowAsync();
            FileInputId = Guid.NewGuid();
            return;
        }

        CallbackExecutor.ExecuteSubscriptionsByName(true, "OnIsFileBeingEncrypted");
        await Split(e.File, TopicName);
        CallbackExecutor.ExecuteSubscriptionsByName(false, "OnIsFileBeingEncrypted");
    }

    private async Task SendMessage()
    {
        if (string.IsNullOrWhiteSpace(MessageInput) && !DataFiles.Any() || string.IsNullOrWhiteSpace(TopicName) || string.IsNullOrWhiteSpace(MyUsername))
        {
            MessageInput = string.Empty;
            return;
        }

        if (!string.IsNullOrWhiteSpace(MessageInput))
        {
            await _messageService.SendText(MessageInput, TopicName, MyUsername);
        }

        if (DataFiles.Any())
        {
            var dataFilesCopy = new List<ClientDataFile>(DataFiles);
            Task.Run(() => _messageService.SendMessage(new()
            {
                ClientFiles = dataFilesCopy,
                Sender = MyUsername,
                TargetGroup = TopicName,
                Type = MessageType.DataPackage
            }));
            FileInputId = Guid.NewGuid();
        }

        MessageInput = string.Empty;
        DataFiles = new(0);
    }

    public async Task Split(IBrowserFile file, string partnerUsername)
    {
        var aesKey = InMemoryKeyStorage.AESKeyStorage
            .First(x => x.Key == partnerUsername).Value.Value?.ToString();
        if (string.IsNullOrWhiteSpace(aesKey))
            throw new ArgumentException($"Exception:{nameof(MessageInputBox)}.{nameof(Split)}:" +
                                        $"No AES key stored for {partnerUsername}.");
        
        var fileDataId = Guid.NewGuid();
        var plainB64Chunks = await PackageMultiplexerService.Split(file);
        int count = plainB64Chunks.Count;
        List<ClientPackage> localUnencryptedPackages = new(plainB64Chunks.Count);
        Console.WriteLine("Chunks count:" + count);
        int bytesProcessed = 0;
        foreach (var chunk in plainB64Chunks)
        {
            localUnencryptedPackages.Add(new ClientPackage()
            {
                Index = bytesProcessed,
                Total = count,
                PlainB64Data = chunk,
                ContentType = file.ContentType,
                FileName = file.Name,
                FileDataid = fileDataId,
            });
            
            var encryptedB64Chunk = await _jSRuntime.InvokeAsync<string>("AESEncryptText", chunk, aesKey);
            var iv = await _jSRuntime.InvokeAsync<string>("ExportIV");

            await _messageService.SendMessage(new()
                {
                    ClientFiles = new List<ClientDataFile>{new ()
                    {
                        Id = fileDataId
                    }},
                    Package = new ()
                    {
                        Index = bytesProcessed,
                        Total = count,
                        B64Data = encryptedB64Chunk,
                        IV = iv,
                        ContentType = file.ContentType,
                        FileName = file.Name,
                        FileDataid = fileDataId,
                    },
                    Type = MessageType.DataPackage,
                    TargetGroup = TopicName,
                    Sender = MyUsername
                });
            
            
            bytesProcessed++;
            decimal progress = Math.Round(bytesProcessed / (decimal)count * 100);
            CallbackExecutor.ExecuteSubscriptionsByName(progress, "OnFileEncryptionProgressChanged");
        }
        
        await _messageBox.AddMessageAsync(new ClientMessage()
        {
            Id = fileDataId,
            TargetGroup = TopicName,
            Sender = MyUsername,
            Packages = localUnencryptedPackages.Select(x=>new ClientPackage()
            {
                Index = x.Index,
                Total = x.Total,
                PlainB64Data = x.PlainB64Data,
                ContentType = file.ContentType,
                FileName = file.Name,
                FileDataid = fileDataId,
            }).ToList()
        }, false);
    }
}