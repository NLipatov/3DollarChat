@using Limp.Client.HubInteraction.Handlers.Helpers;
@using Limp.Client.Pages.AuthenticationChecks.Stages;
@using Limp.Client.Services;
@using Limp.Client.Services.HubServices.HubServices.Implementations.AuthService
@using Limp.Client.Services.JWTReader;
@inject IJSRuntime _jS
@inject IConfiguration _configuration
@inject NavigationManager _navigationManager
@inject IAuthService _authService

@if(_authenticationState == AuthenticationState.TokenActualisation)
{
    <div class="d-flex flex-column align-items-center text-center">
        <p class="mt-3 mb-0">Checking if you have been authenticated</p>
    </div>
}
else
{
    if (_authenticationState == AuthenticationState.Authenticated)
    {
        @AuthenticatedContent
    }
    else
    {
        @UnauthenticatedContent
    }
}


@code {
    [Parameter] 
    public RenderFragment? AuthenticatedContent { get; set; }
    [Parameter] 
    public RenderFragment? UnauthenticatedContent { get; set; }
    private AuthenticationState _authenticationState { get; set; } = AuthenticationState.TokenActualisation;

    protected override async Task OnInitializedAsync()
    {
        string? accessToken = await JWTHelper.GetAccessTokenAsync(_jS);
        if (string.IsNullOrWhiteSpace(accessToken) || !TokenReader.IsTokenReadable(accessToken))
        {
            _navigationManager.NavigateTo("signin");
            return;
        }
        
        await _authService.RenewalAccessTokenIfExpiredAsync(isRenewalSucceededCallback: RefreshTokenAttemptResult);
    }

    private async Task RefreshTokenAttemptResult(bool isRenewalSucceededCallback)
    {
        //If the refresh token is invalid, the user must log in again
        if (!isRenewalSucceededCallback)
            _authenticationState = AuthenticationState.NotAuthenticated;

        //Else - checking if actualised access token is valid
        await _authService.ValidateAccessTokenAsync(DecideOnToken);
    }

    private async Task DecideOnToken(bool isAccessTokenValid)
    {
        if(isAccessTokenValid)
            _authenticationState = AuthenticationState.Authenticated;
        else
        {
            _authenticationState = AuthenticationState.NotAuthenticated;
        }

        StateHasChanged();
    }
}
