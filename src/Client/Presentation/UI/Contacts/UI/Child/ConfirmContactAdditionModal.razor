@using Ethachat.Client.Services.ContactsProvider
@using Ethachat.Client.UI.Contacts.Models
@using ButtonType = Ethachat.Client.UI.Shared.Button.ButtonType
@inject IContactsProvider ContactsProvider
@inject IJSRuntime JsRuntime

<CustomModal
    @ref="modal"
    Title=@Title
    Buttons=@Buttons/>

@code {
    [Parameter] public EventCallback<string> OnContactAddition { get; set; }

    //reference to a modal-component
    private CustomModal? modal = default;

    public void ShowModal() => modal?.Show();
    public void HideModal() => modal?.Hide();

    private string Title { get; set; } = string.Empty;
    private CustomButton[] Buttons { get; set; } = [];

    public async Task ShowModalWithBodyTextAsync(NewContactModel modalDto)
    {
        var duplicate = await ContactsProvider.GetContact(modalDto.Username, JsRuntime) is not null;
        var username = modalDto.Username;
        var exists = modalDto.Exists;
        
        Title = GetTitleText(username: username, existing: exists, duplicate: duplicate);
        Buttons = GetModalButtons(username: username, existing: exists, duplicate: duplicate);
        StateHasChanged();

        ShowModal();
    }

    private string GetTitleText(string username, bool existing, bool duplicate)
    {
        if (!existing)
            return "No such user!";
        
        if (duplicate)
            return "Duplicate contact!";
        
        if (!string.IsNullOrWhiteSpace(username))
            return $"Add '{username}' as contact?";

        return "Confirm new contact addition";
    }

    private CustomButton[] GetModalButtons(string username, bool existing, bool duplicate)
    {
        if (existing && !duplicate)
        {
            return
            [
                new CustomButton { ButtonType = ButtonType.Success, Title = "Add", OnPressAsync = () => OnContactAddition.InvokeAsync(username) },
                new CustomButton { ButtonType = ButtonType.Secondary, Title = "Cancel", OnPress = HideModal }
            ];
        }

        return [new CustomButton { ButtonType = ButtonType.Secondary, Title = "Hide", OnPress = HideModal }];
    }

}