@page "/users"
@using Limp.Client.HubInteraction.Handlers.Helpers;
@using Limp.Client.Pages.AuthenticationChecks
@using Limp.Client.Services.HubService.UsersService;
@using Limp.Client.Services.HubServices.CommonServices.SubscriptionService;
@using Limp.Client.Services.JWTReader;
@using Limp.Client.UIComponents.ContactItem
@using LimpShared.Models.ConnectedUsersManaging;
@inject NavigationManager _navigationManager
@inject IJSRuntime _jS
@inject IUsersService _usersService
@inject IHubServiceSubscriptionManager _hubServiceSubscriptionManager
@implements IDisposable

<PageTitle>Users Online</PageTitle>

<AuthenticatedView>
    <AuthenticatedContent>
    <div class="ApplicationContent p-2">
            @if (!_usersOnlineMessage.UserConnections.Any(x => x.Username != myUsername))
            {
                <Callout Type="CalloutType.Info">
                    <span>Looks like everyone is offline now.</span>
                </Callout>
            }

            <Virtualize 
                Items="_usersOnlineMessage?.UserConnections.Where(x => x.Username != myUsername && x.ConnectionIds.Count > 0).DistinctBy(x=>x.Username).ToArray() ?? new UserConnection[0]"
                Context="connection">

                <ContactBar Username="@connection.Username"
                            IsOnline="true"
                            OnClickCallback="@(()=>_navigationManager.NavigateTo($"user/{connection.Username}"))" />
            </Virtualize>
    </div>
    </AuthenticatedContent>
    <UnauthenticatedContent>
        <UnAuthorized/>
    </UnauthenticatedContent>
</AuthenticatedView>

@code {
    private UserConnectionsReport _usersOnlineMessage { get; set; } = new();
    private string myUsername { get; set; } = String.Empty;
    private Guid ComponentId { get; set; }

    public void Dispose() => _hubServiceSubscriptionManager.RemoveComponentCallbacks(ComponentId);

    protected override async Task OnInitializedAsync()
    {
        //Shortcut for cases when user was not yet authenticated
        if (string.IsNullOrWhiteSpace(await JWTHelper.GetAccessTokenAsync(_jS))) return;

        //This id will be needed on dispose stage
        //On dispose stage we need to clear out all of the component event subscriptions
        ComponentId = Guid.NewGuid();

        //Reading username from access-token
        myUsername = await GetMyUsername();

        //If username was not read, ask user to relogin
        if(string.IsNullOrWhiteSpace(myUsername))
        {
            _navigationManager.NavigateTo("/signIn");
            return;
        }

        //Subscribing to server event of updating online users
        _hubServiceSubscriptionManager
            .AddCallback<UserConnectionsReport>(UpdateUsersList, "ReceiveOnlineUsers", ComponentId);

        //Actualizing list of users that currently online
        await _usersService.ActualizeConnectedUsersAsync();
    }

    private async Task<string> GetMyUsername()
    {
        string? accessToken = await JWTHelper.GetAccessTokenAsync(_jS);
        if (string.IsNullOrWhiteSpace(accessToken))
            return string.Empty;

        myUsername = TokenReader.GetUsernameFromAccessToken(accessToken);

        return myUsername;
    }

    private void UpdateUsersList(UserConnectionsReport usersOnlineMessage)
    {
        if (_usersOnlineMessage == null || _usersOnlineMessage.FormedAt < usersOnlineMessage.FormedAt)
        {
            _usersOnlineMessage = usersOnlineMessage;
            StateHasChanged();
        }
    }
}
