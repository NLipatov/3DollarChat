@page "/register"
@using AuthAPI.DTOs.Claims;
@using AuthAPI.DTOs.User;
@using Limp.Shared.Models.Login;
@using Limp.Client.Utilities;
@using LimpShared.Authentification;
@using Microsoft.AspNetCore.SignalR.Client;
@using Limp.Shared.Models;
@inject IConfiguration _configuration;
@inject NavigationManager Navigation;

<PageTitle>Sign Up</PageTitle>

<label>Login
    <input required @bind=Username @bind:event="oninput" />
</label>
<label>Password 
    <input required type="password" @bind=Password @bind:event="oninput"/>
</label>
<label>
    Password confirmation
    <input required type="password" @bind=PasswordConfirmation @bind:event="oninput" />
</label>

<button @onclick="ValidateAsync">
    Register
</button>

@if(isRegistered)
{
    <h2>
        Registered Succesfully!
    </h2>
}

@if(lastRegisterAttemptResult != null)
{
    <h2>
        @lastRegisterAttemptResult.Message
    </h2>
}

@code {
    public string Username { get; set; }
    public string Password { get; set; }
    public string PasswordConfirmation { get; set; }
    private HubConnection? hubConnection;
    public bool isRegistered { get; set; } = false;
    private LogInResult lastRegisterAttemptResult { get; set; } = null;

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
        .WithUrl(Navigation.ToAbsoluteUri("/authHub"))
        .Build();

        hubConnection.On<LogInResult>("OnRegister", result =>
        {
            if(result.Result == LogInStatus.Success)
            {
                lastRegisterAttemptResult = new LogInResult
                {
                    Result = LogInStatus.Success,
                    Message = "Registered!"
                };

                StateHasChanged();
            }
        });

        await hubConnection.StartAsync();
    }

    async Task ValidateAsync()
    {
        if(Password != PasswordConfirmation)
        {
            lastRegisterAttemptResult = new LogInResult
            {
                Result = LogInStatus.Fail,
                Message = "Password does not match Password Confirmation!"
            };
        }
        else
        {
            await RegisterAsync();
        }
    }

    async Task RegisterAsync()
    {
        var data = new UserDTO()
        {
            Username = Username,
            Password = PasswordConfirmation,
            Claims = new List<UserClaimsDTO>
            {
                new UserClaimsDTO
                {
                    Name = "Name",
                    Value = Username,
                }
            }
            };

        await hubConnection.SendAsync("Register", data);
    }
}