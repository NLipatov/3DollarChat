@using ClientServerCommon.Models.Message;
@using Limp.Client.Services.HubServices.CommonServices.SubscriptionService;
@using Limp.Client.Services.InboxService;
@using Limp.Client.Pages.PersonalChat.UI.Childs.MessageCollectionDispaying.Childs
@inject IMessageBox _messageBox
@inject IHubServiceSubscriptionManager _hubServiceSubscriptionManager
@inject IJSRuntime _jSRuntime

<div class="messages-box">
    <Virtualize Items="_messageBox.FetchMessagesFromMessageBox(topicName)" Context="message">
        <SingleMessage Message="message"/>
    </Virtualize>
</div>

@code {
    [Parameter]
    public string topicName { get; set; } = string.Empty;
    private Guid ComponentId { get; set; }

    public void Dispose() => _hubServiceSubscriptionManager.RemoveComponentCallbacks(ComponentId);
    protected override async Task OnInitializedAsync()
    {
        SubscribeToHubEvents();
    }

    private void SubscribeToHubEvents()
    {
        _hubServiceSubscriptionManager.AddCallback<Guid>(MarkAsReceived, "MessageWasReceivedByRecepient", ComponentId);
        _hubServiceSubscriptionManager.AddCallback<Message>(AddMessageAsync, "MessageBoxUpdate", ComponentId);
    }

    public void MarkAsReceived(Guid messageId)
    {
        _messageBox.MarkAsReceived(messageId);
        StateHasChanged();
    }

    public async Task AddMessageAsync(Message message)
    {
        StateHasChanged();
        await ScrollToLastMessage();
    }

    private async Task ScrollToLastMessage()
    {
        string jsCode = 
        @"var messagesBox = document.querySelector('.messages-box');
        messagesBox.scrollTop = messagesBox.scrollHeight;";

        await _jSRuntime.InvokeVoidAsync("eval", jsCode);
    }
}
