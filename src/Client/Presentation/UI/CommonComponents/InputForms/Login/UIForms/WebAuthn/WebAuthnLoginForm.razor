@page "/signin/webauthn"
@page "/signup/webauthn"
@using Ethachat.Client.Services.HubServices.HubServices.Implementations.AuthService
@using Ethachat.Client.Services.LocalStorageService
@using Ethachat.Client.UI.CommonComponents.InputForms.Login.UIForms.BaseForm
@using EthachatShared.Models.Authentication.Models.UserAuthentication
@inject IJSRuntime Js;
@inject IAuthService AuthService
@inject ILocalStorageService LocalStorageService
@inject NavigationManager NavigationManager
@inherits Ethachat.Client.UI.CommonComponents.BaseComponents.BaseEventListeningComponent

@if (IsLoginFormVisible)
{
    <BaseLoginForm
        OnLoginEvent="async (dto) => await OnLogin(dto)"
        ViaWebAuthn=@true/> 
        
    @if (!string.IsNullOrWhiteSpace(LoginResultMessage))
    {
        <p>
            @LoginResultMessage
        </p>
    }
}

@code {
    [Parameter]
    public bool IsRegisterFormVisible { get; set; }
    
    [Parameter]
    public bool IsLoginFormVisible { get; set; }
    
    private IJSObjectReference? module;
    private string LoginResultMessage { get; set; } = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        ComponentId = Guid.NewGuid();
        SubscribeToHubEvents();
        await Js.InvokeVoidAsync("setServiceAddress", NavigationManager.BaseUri);

        await base.OnInitializedAsync();
    }

    private async Task OnLogin(UserAuthentication userDTO)
    {
        await Js.InvokeVoidAsync("handleSignInSubmit", userDTO.Username);
        var credentialId = await LocalStorageService.ReadPropertyAsync("credentialIdCounter");
        await LocalStorageService.WritePropertyAsync("credentialIdCounter", "1");
        if (string.IsNullOrWhiteSpace(credentialId))
            LoginResultMessage = "Login attempt failed";
        else
            NavigationManager.NavigateTo("/contacts");
    }
}