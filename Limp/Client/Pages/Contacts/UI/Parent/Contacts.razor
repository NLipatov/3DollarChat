@page "/contacts"
@using Limp.Client.Pages.Contacts.UI.Child;
@using ClientServerCommon.Models;
@using Limp.Client.Pages.Contacts.Models;
@using Limp.Client.Services.ContactsProvider;
@using Limp.Client.Services.HubService.UsersService;
@using Limp.Client.Services.HubServices.CommonServices.SubscriptionService;
@using Limp.Client.UIComponents.ContactItem;
@inject NavigationManager _navigationManager;
@inject IContactsProvider _contactsProvider;
@inject IUsersService _usersService
@inject IHubServiceSubscriptionManager _hubServiceSubscriptionManager
@inject IJSRuntime _jSRuntime;
@implements IDisposable

<div class="p-2" style="  
    width: 100%;
    height: 100%;
    overflow: auto;">
    <div>
        <div class="m-2 p-2" style="
        background-color: whitesmoke;">
            <h1>Search for a new contact!</h1>
            <div class="input-group mb-3">
                <div class="input-group-prepend">
                    <span class="input-group-text" id="basic-addon1">@("@")</span>
                </div>
                <input type="text" class="form-control" placeholder="Username" aria-label="Username" aria-describedby="basic-addon1" @bind-value="NewContactUsername">
            </div>
            <Button Color="ButtonColor.Primary" @onclick="OnAddContactAttempt">
                <span>Search for a user</span>
                <Icon Name="IconName.Search" />
            </Button>
        </div>

        @if(ContactsList.Any())
        {
            <ContactsList
                OnContactRemoved="RemoveContact"
                ContactCollection="ContactsList"
                OnContactClicked="NavigateToChatWithContact"/>
        }
        else
        {
            <Callout Class="m-2" Type="CalloutType.Tip">
                <div style="display: flex; flex-direction: column;">
                    <h3>Your contact book is empty</h3>
                    <span>Add someone and start a new chat!</span>
                </div>
            </Callout>
        }
    </div>
</div>

<Modal @ref="modal" Title="Add user to contacts">
    <BodyTemplate>
        @if (ContactsList.Any(x => x.Username == NewContactUsername))
        {
            <span>
                @NewContactUsername is already in your contact book
            </span>
        }
        else
        {
            @ModalBody
        }
    </BodyTemplate>
    <FooterTemplate>
        @if(IsUserExists)
        {
            @if(ContactsList.Any(x=>x.Username == NewContactUsername))
            {
                <Button Color="ButtonColor.Secondary" @onclick="HideModal">Hide</Button>
            }
            else
            {
                <Button Color="ButtonColor.Danger" @onclick="HideModal">Cancel</Button>
                <Button Color="ButtonColor.Success" @onclick="(async ()=>await HandleContactAddition(NewContactUsername))">Confirm</Button>
            }
        }
        else
        {
            <Button Color="ButtonColor.Secondary" @onclick="HideModal">Hide</Button>
        }
    </FooterTemplate>
</Modal>

@code {
    private Modal modal = default!;
    private string ModalBody = string.Empty;
    private bool IsUserExists = false;
    private string NewContactUsername = string.Empty;
    private List<Contact> ContactsList = new();
    private bool contactEditionMode = false;
    private Guid ComponentId { get; set; }
    private List<UserConnection> LastReceivedContacts { get; set; } = new();

    public void Dispose() => _hubServiceSubscriptionManager.RemoveComponentCallbacks(ComponentId);

    private async Task ToggleContactEditionMode()
    {
        contactEditionMode = !contactEditionMode;
        StateHasChanged();
    }

    public void NavigateToChatWithContact(string contactUsername)
    {
        _navigationManager.NavigateTo($"user/{contactUsername}");
    }

    private async Task RemoveContact(string username)
    {
        //Get contact out of client's browser local storage
        await _contactsProvider.RemoveContact(username, _jSRuntime);

        //If there is no one in contact book left, toggle change mode back to false automatically
        if(!(await _contactsProvider.GetContacts(_jSRuntime)).Any())
        {
            await ToggleContactEditionMode();
        }

        //update displayed contacts in UI component
        await UpdateContacts();
    }

    private async Task ShowModal()
    {
        await modal.ShowAsync();
    }

    private async Task HideModal()
    {
        await modal.HideAsync();
    }

    private async Task OnAddContactAttempt()
    {
        if (!string.IsNullOrWhiteSpace(NewContactUsername))
        {
            IsUserExists = true;
            if (IsUserExists)
            {
                ModalBody = $"Confirm adding '{NewContactUsername}' as new contact";
                await ShowModal();
            }
            else
            {
                ModalBody = $"There is no user with such username"; 
                await ShowModal();
            }
        }
    }

    private async Task HandleContactAddition(string username)
    {
        await _contactsProvider.AddContact(NewContactUsername, _jSRuntime);
        await HideModal();
        await UpdateContacts();
    }


    protected override async Task OnInitializedAsync()
    {
        //This id will be needed on dispose stage
        //On dispose stage we need to clear out all of the component event subscriptions
        ComponentId = Guid.NewGuid();

        //Subscribing to server event of updating online users
        _hubServiceSubscriptionManager
            .AddCallback<List<UserConnection>>(UpdateContacts, "ReceiveOnlineUsers", ComponentId);

        //Actualizing list of users that currently online
        await _usersService.ActualizeConnectedUsersAsync();
    }

    private async Task UpdateContacts(List<UserConnection>? updatedUserConnections = null)
    {
        TryUpdateLastReceivedContacts(updatedUserConnections);

        List<string> contacts = await _contactsProvider.GetContacts(_jSRuntime);
        ContactsList = contacts.Select(contact =>
        new Contact
            {
                Username = contact,
                IsOnline = LastReceivedContacts.Any(x=>x.Username == contact),
                LastMessage = DateTime.UtcNow
            }).ToList();

        StateHasChanged();
    }

    private void TryUpdateLastReceivedContacts(List<UserConnection>? userConnections = null)
    {
        if (userConnections != null)
        {
            LastReceivedContacts = userConnections;
        }
    }
}