@page "/users"
@using Limp.Client.HubInteraction.Handlers;
@using Limp.Client.HubInteraction;
@using ClientServerCommon.Models;
@using Limp.Client.Cryptography;
@using Limp.Client.Cryptography.KeyStorage;
@using Limp.Client.HubInteraction.Handlers.Helpers;
@using Limp.Client.HubInteraction.Handlers.MessageDispatcherHub.AESOfferHandling;
@using Limp.Client.Services.HubConnectionProvider;
@using Limp.Client.Services.HubService.UsersService;
@using Limp.Client.Services.HubServices.MessageService;
@using Limp.Client.Services;
@using Limp.Client.TopicStorage;
@using LimpShared.Authentification;
@using Microsoft.AspNetCore.SignalR.Client;
@using Limp.Client.UIComponents.ContactItem;
@using ClientServerCommon.Models.Login;
@using System.Collections.Concurrent;
@inject NavigationManager _navigationManager
@inject ICryptographyService _cryptographyService
@inject IMessageBox _messageBox
@inject IAESOfferHandler _aesOfferHandler
@inject IJSRuntime _jS
@inject IUsersService _usersService
@inject IMessageService _messageService
@implements IAsyncDisposable

<PageTitle>Users Online</PageTitle>

<div style="padding: 0.5rem 1rem;">
    @foreach (var connection in userConnections.Where(x=>x.Username != myUsername && x.ConnectionIds.Count > 0))
    {
        <ContactBar
            Username="@connection.Username"
            IsOnline="true"
            OnClickCallback="@(()=>_navigationManager.NavigateTo($"user/{connection.Username}"))"/>
    }
</div>

@code {
    private ConcurrentBag<UserConnection> userConnections { get; set; } = new();
    private string myConnectionId { get; set; } = string.Empty;
    private string myUsername { get; set; } = string.Empty;
    private HubConnection? usersHubConnection;
    private Guid? UsersUsersOnlineSubscriptionId { get; set; }
    private Guid? MessageUsersOnlineSubscriptionId { get; set; }

    private async Task HandleMyConnectionIdUpdate(string id)
    {
        myConnectionId = id;
    }

    private async Task ResolveMyUsername()
    {
        string? accessToken = await JWTHelper.GetAccessToken(_jS);
        if(!string.IsNullOrWhiteSpace(accessToken))
        {
            myUsername = TokenReader.GetUsername(accessToken);
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await ResolveMyUsername();

        UsersUsersOnlineSubscriptionId = _usersService.SubscribeToUsersOnlineUpdate(HandleUserConnectionsUpdate);
        MessageUsersOnlineSubscriptionId = _messageService.SubscribeToUsersOnline(HandleUserConnectionsUpdate);

        await _usersService.ActualizeConnectedUsersAsync();
    }

    private async Task HandleUserConnectionsUpdate(List<UserConnection> updatedUserConnections)
    {
        userConnections.Clear();
        foreach (var connection in updatedUserConnections)
        {
            userConnections.Add(connection);
        }
        StateHasChanged();
    }

    private void Rerender()
    {
        StateHasChanged();
    }

    public async ValueTask DisposeAsync()
    {
        if(UsersUsersOnlineSubscriptionId.HasValue)
        {
            _usersService.RemoveSubsctiptionToUsersOnlineUpdate(UsersUsersOnlineSubscriptionId.Value);
        }
        if (MessageUsersOnlineSubscriptionId.HasValue)
        {
            _messageService.RemoveSubscriptionToUsersOnline(MessageUsersOnlineSubscriptionId.Value);
        }
    }
}
