@page "/signup"
@using Limp.Client.Pages.AccountManagement.LogicHandlers;
@using Limp.Client.UIComponents.InputForms.Registration
@using LimpShared.Models.Authentication.Models;
@using LimpShared.Models.Authentication.Models.UserAuthentication;
@using Microsoft.AspNetCore.SignalR.Client;
@using System.ComponentModel.DataAnnotations;
@using Limp.Client.UIComponents.SuccessOrErrorMessage;
@using System.Text.RegularExpressions;
@using ClientServerCommon
@inject IConfiguration _configuration;
@inject NavigationManager Navigation;
@inject ILoginHandler _loginHandler
@inject NavigationManager _navigationManager
@implements IAsyncDisposable;

<PageTitle>Sign Up</PageTitle>

<RegistrationForm 
    OnRegisterEvent="async (dto) => await OnRegister(dto)"
    RegistrationAttemptResult="lastRegisterAttemptResult" />

@code {
    private HubConnection? hubConnection;
    private AuthResult lastRegisterAttemptResult { get; set; } = new();
    private UserAuthentication? lastRegisterDTO { get; set; }

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
        .WithUrl(Navigation.ToAbsoluteUri("/authHub"))
        .Build();

        hubConnection.On<AuthResult>("OnRegister", result =>
        {
            //If registration attempt successfull — log in and redirect user
            if(result.Result is AuthResultType.Success)
            {
                LogInAndRedirect(result);
            }
            //Else - display error message to user
            else
                StateHasChanged();
        });

        await hubConnection.StartAsync();
    }

    private void LogInAndRedirect(AuthResult result)
    {
        //If we have DTO with wich user was registered successfully, we can automatically log that user in
        if (result.Result == AuthResultType.Success && lastRegisterDTO is not null)
        {
            _loginHandler.OnLogIn(lastRegisterDTO, ((authResult) =>
            {
                if (authResult.Result == AuthResultType.Success)
                    _navigationManager.NavigateTo("/users");
            }));
        }
    }

    private async Task OnRegister(UserAuthentication newUserDTO)
    {
        lastRegisterDTO = newUserDTO;

        if (hubConnection == null)
            throw new ApplicationException("No connection with Hub.");

        await hubConnection.SendAsync("Register", newUserDTO);
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection != null)
        {
            await hubConnection.StopAsync();
            await hubConnection.DisposeAsync();
        }
    }
}