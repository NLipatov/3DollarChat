@page "/users"
@using Ethachat.Client.Services.Authentication.Handlers
@using Ethachat.Client.UI.AuthenticationChecks
@using Ethachat.Client.Services.HubServices.CommonServices.SubscriptionService;
@using Ethachat.Client.Services.HubServices.HubServices.Implementations.UsersService
@using Ethachat.Client.UI.CommonComponents.ContactItem
@using EthachatShared.Models.ConnectedUsersManaging;
@using Ethachat.Client.UI.Shared.Callout
@using CalloutType = Ethachat.Client.UI.Shared.Callout.CalloutType
@inject NavigationManager NavigationManager
@inject IUsersService UsersService
@inject IHubServiceSubscriptionManager HubServiceSubscriptionManager
@inject IAuthenticationHandler AuthenticationHandler
@implements IDisposable

<PageTitle>Users Online</PageTitle>

<AuthenticatedView>
    <AuthenticatedContent>
        <div class="ApplicationContent p-2">
            @if (UsersOnlineMessage.UserConnections.All(x => x.Username == MyUsername))
            {
                <CustomCallout
                    CalloutTitle="No one online"
                    CalloutType="CalloutType.Info"/>
            }
            else if (string.IsNullOrWhiteSpace(MyUsername))
            {
                <CustomCallout
                    CalloutType="CalloutType.Info"
                    CalloutBody="Resolving your username."/>
            }
            else
            {
                <Virtualize
                    Items="UsersOnlineMessage.UserConnections
                        .Where(x => x.Username != MyUsername && x.ConnectionIds.Count > 0)
                        .DistinctBy(x => x.Username).ToArray()"
                    Context="connection">

                    <ContactBar Username="@connection.Username"
                                OnClickCallback="@(() => NavigationManager.NavigateTo($"{connection.Username}"))"/>
                </Virtualize>
            }
        </div>
    </AuthenticatedContent>
    <UnauthenticatedContent>
        <UnAuthorized/>
    </UnauthenticatedContent>
</AuthenticatedView>

@code {
    private UserConnectionsReport UsersOnlineMessage { get; set; } = new();
    private string MyUsername { get; set; } = String.Empty;
    private Guid ComponentId { get; set; }

    public void Dispose() => HubServiceSubscriptionManager.RemoveComponentCallbacks(ComponentId);

    protected override async Task OnInitializedAsync()
    {
        //This id will be needed on dispose stage
        //On dispose stage we need to clear out all the component event subscriptions
        ComponentId = Guid.NewGuid();

        if (!await AuthenticationHandler.IsSetToUseAsync())
        {
            NavigationManager.NavigateTo("/signIn");
            return;
        }

        MyUsername = await AuthenticationHandler.GetUsernameAsync();

        //Subscribing to server event of updating online users
        HubServiceSubscriptionManager
            .AddCallback<UserConnectionsReport>(UpdateUsersList, "ReceiveOnlineUsers", ComponentId);

        //Actualizing list of users that currently online
        await UsersService.ActualizeConnectedUsersAsync();
    }

    private void UpdateUsersList(UserConnectionsReport usersOnlineMessage)
    {
        if (UsersOnlineMessage.FormedAt <= usersOnlineMessage.FormedAt)
        {
            UsersOnlineMessage = usersOnlineMessage;
            StateHasChanged();
        }
    }

}