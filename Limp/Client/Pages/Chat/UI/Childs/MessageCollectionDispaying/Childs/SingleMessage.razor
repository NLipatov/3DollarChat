@using Limp.Client.ClientOnlyModels;
@using Limp.Client.Services.HubServices.CommonServices.CallbackExecutor;
@using Limp.Client.Services.HubServices.CommonServices.SubscriptionService;
@using Limp.Client.Services.HubServices.HubServices.Implementations.MessageService
@using Limp.Client.Services.InboxService;
@using LimpShared.Models.Message;
@using Ljbc1994.Blazor.IntersectionObserver
@inject IIntersectionObserverService _observerService
@inject ICallbackExecutor _callbackExecutor
@inject IMessageBox _messageBox
@inject IMessageService _messageService
@inject IHubServiceSubscriptionManager _hubServiceSubscriptionManager
@implements IDisposable

@if(message != null)
{
    <div class="message @messageClass" @ref="MessageElement">
        <div class="message-text">
            <span>@(message.PlainText)</span>
        </div>
        <div class="timestamp">
            <span>@message.DateSent.ToString("hh:mm")</span>
            @if (message.Sender == myUsername)
            {
                @if (message.Sender == myUsername)
                {
                    @if (message.IsSeen)
                    {
                        //Wrapping i in span tag solves "Cannot read property 'removeChild' of null" error.
                        //issue reference: https://stackoverflow.com/a/64686984
                        <span>
                            <i class="fas fa-check-double @messageClass"></i>
                        </span>
                    }
                    else if (message.IsDelivered)
                    {
                        //Wrapping i in span tag solves "Cannot read property 'removeChild' of null" error.
                        //issue reference: https://stackoverflow.com/a/64686984
                        <span>
                            <i class="fas fa-check @messageClass"></i>
                        </span>
                    }
                    else if(!message.IsDelivered)
                    {
                        <span style="color: dodgerblue; cursor: pointer;" @onclick="(() => OnResend.InvokeAsync(message))">
                            <i class="bi bi-arrow-clockwise">Resend</i>
                        </span>
                    }
                }
            }
        </div>
    </div>
}

@code {
    public ElementReference MessageElement { get; set; }
    public bool IsIntersecting { get; set; }

    [Parameter]
    public EventCallback<ClientMessage> OnResend { get; set; }

    [Parameter]
    public ClientMessage? message { get; set; }

    [Parameter]
    public string? myUsername { get; set; }

    private bool isOutcoming;
    private string messageClass = string.Empty;
    private Guid componentId { get; set; }

    public void Dispose()
    {
        _hubServiceSubscriptionManager.RemoveComponentCallbacks(componentId);
        _observerService.Observe(new(), null, null);
    }

    protected override void OnInitialized()
    {
        componentId = Guid.NewGuid();

        SubscribeToHubEvents();
    }

    private void SubscribeToHubEvents()
    {
        _hubServiceSubscriptionManager.AddCallback<Guid>(((id) =>
        {
            _messageBox.OnSeen(id);
            StateHasChanged();
        }), "OnReceiverMarkedMessageAsRead", componentId);
    }

    protected override async Task OnParametersSetAsync()
    {
        isOutcoming = message?.Sender == myUsername;
        messageClass = isOutcoming ? "outcoming" : "incoming";

        await base.OnParametersSetAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await SetupObserver();
        }
    }

    public async Task SetupObserver()
    {
        await _observerService.Observe(MessageElement, (entries) =>
        {
            var entry = entries.FirstOrDefault();
            if(entry is not null)
            {
                if (message is not null && message.Sender != myUsername)
                {
                    //sends sender a message has been readed confirmation
                    _messageService.NotifySenderThatMessageWasReaded(message.Id, message.Sender, myUsername);
                    //Marks message as seen
                    _messageBox.OnSeen(message.Id);
                }

                IsIntersecting = entry.IsIntersecting;
                StateHasChanged();
            }
        });
    }
}
