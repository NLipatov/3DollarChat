@using ClientServerCommon.Models.Message;
@using Limp.Client.Services.HubServices.CommonServices.SubscriptionService;
@using Limp.Client.Services.InboxService;
@using Limp.Client.Pages.PersonalChat.UI.Childs.MessageCollectionDispaying.Childs
@inject IMessageBox _messageBox
@inject IHubServiceSubscriptionManager _hubServiceSubscriptionManager

<div class="messages-box">
    <Virtualize Items="@(Messages.Where(x => x.Type == MessageType.UserMessage).ToList())" Context="message">
        <SingleMessage 
            Message="message"/>
    </Virtualize>
</div>

@code {
    [Parameter]
    public string topicName { get; set; } = string.Empty;
    private List<Message> Messages { get; set; } = new();
    private Guid ComponentId { get; set; }

    public void Dispose() => _hubServiceSubscriptionManager.RemoveComponentCallbacks(ComponentId);
    protected override async Task OnInitializedAsync()
    {
        Messages = GetPreviousMessages();

        SubscribeToHubEvents();
    }

    private void SubscribeToHubEvents()
    {
        _hubServiceSubscriptionManager.AddCallback<Guid>(MarkAsReceived, "MessageWasReceivedByRecepient", ComponentId);
        _hubServiceSubscriptionManager.AddCallback<Message>(AddMessage, "IncomingMessageReceived", ComponentId);
    }

    private List<Message> GetPreviousMessages()
    {
        //This id will be needed on dispose stage
        //On dispose stage we need to clear out all of the component event subscriptions
        ComponentId = Guid.NewGuid();

        if (string.IsNullOrWhiteSpace(topicName))
        {
            throw new ApplicationException("Chat topic name was not resolved, could not messages from this topic.");
        }

        List<Message> messagesFromMessageBox = _messageBox.FetchMessagesFromMessageBox(topicName);
        return messagesFromMessageBox;
    }

    public void MarkAsReceived(Guid messageId)
    {
        Message? receivedMessage = Messages
        .Where(x=>x.Sender == "You")
        .FirstOrDefault(x => x.Id == messageId);

        if (receivedMessage != null)
        {
            receivedMessage.IsReceived = true;
            StateHasChanged();
        }
    }

    public void AddMessage(Message message)
    {
        Messages.Add(message);
        StateHasChanged();
    }
}
