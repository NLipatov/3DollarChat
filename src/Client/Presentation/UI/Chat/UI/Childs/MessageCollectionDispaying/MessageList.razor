@using Ethachat.Client.Services.HubServices.CommonServices.SubscriptionService;
@using Ethachat.Client.Services.InboxService;
@using Ethachat.Client.UI.Chat.UI.Childs.MessageCollectionDispaying.Childs
@using Ethachat.Client.Services.HubServices.HubServices.Implementations.MessageService
@using EthachatShared.Models.Message;
@using Ethachat.Client.Services.VideoStreamingService
@using global::Client.Transfer.Domain.Entities.Messages
@inject IMessageBox MessageBox
@inject IHubServiceSubscriptionManager HubServiceSubscriptionManager
@inject IJSRuntime JsRuntime
@inject IMessageService MessageService
@inject IHlsStreamingService HlsStreamingService
@implements IDisposable

<div class="messages-box @HtmlClass">
    <VirtualScrolling
        Components=@(MessagesToShowRenderFragments)/>
</div>

@code {

    [Parameter] public string TargetGroup { get; set; } = string.Empty;

    [Parameter] public string MyUsername { get; set; } = string.Empty;

    [Parameter] public string HtmlClass { get; set; } = string.Empty;

    private Guid ComponentId { get; set; }

    public void Dispose() => HubServiceSubscriptionManager.RemoveComponentCallbacks(ComponentId);

    private List<ClientMessage> MessagesToShow => MessageBox.Messages.Where(x => x.Type is not MessageType.Metadata).Where(x => x.Target == TargetGroup || x.Sender == TargetGroup).ToList();
    private List<RenderFragment> MessagesToShowRenderFragments => MessagesToShow.Select(RenderSingleMessage).ToList();

    private RenderFragment RenderSingleMessage(ClientMessage message) => @<SingleMessage Message=@message MyUsername=@MyUsername/>;

    protected override void OnInitialized()
    {
        base.OnInitialized();

        ComponentId = Guid.NewGuid();
        SubscribeToHubEvents();
    }

    private void SubscribeToHubEvents()
    {
        HubServiceSubscriptionManager
            .AddCallback<Guid>(MarkAsReceived, "OnReceiverMarkedMessageAsReceived", ComponentId);
        
        HubServiceSubscriptionManager
            .AddCallback<Guid>(MarkAsReadAsync, "OnReceiverMarkedMessageAsRead", ComponentId);

        HubServiceSubscriptionManager
            .AddCallback(AddMessageAsync, "MessageBoxUpdate", ComponentId);
    }

    private async Task MarkAsReceived(Guid messageId)
    {
        await MessageBox.OnDelivered(messageId);

        StateHasChanged();
    }

    private Task MarkAsReadAsync(Guid messageId)
    {
        MessageBox.OnSeen(messageId);

        StateHasChanged();
        return Task.CompletedTask;
    }

    private async Task AddMessageAsync()
    {
        StateHasChanged();

        await ScrollToLastMessage();
    }

    private async Task ScrollToLastMessage()
    {
        string jsCode =
            @"var messagesBox = document.querySelector('.messages-box');
        messagesBox.scrollTop = messagesBox.scrollHeight;";

        await JsRuntime.InvokeVoidAsync("eval", jsCode);
    }

}