using Blazored.Toast;
using Limp.Client;
using Limp.Client.Cryptography;
using Limp.Client.HubConnectionManagement.ConnectionHandlers.MessageDispatcher.AESOfferHandling;
using Limp.Client.HubInteraction.EventExecution;
using Limp.Client.HubInteraction.Handlers.MessageDecryption;
using Limp.Client.Pages.AccountManagement.LogicHandlers;
using Limp.Client.Pages.Chat.Logic.MessageBuilder;
using Limp.Client.Services.CloudKeyService;
using Limp.Client.Services.ConcurrentCollectionManager;
using Limp.Client.Services.ConcurrentCollectionManager.Implementations;
using Limp.Client.Services.ContactsProvider;
using Limp.Client.Services.ContactsProvider.Implementations;
using Limp.Client.Services.DataTransmission.PackageForming;
using Limp.Client.Services.HubServices.CommonServices.CallbackExecutor;
using Limp.Client.Services.HubServices.CommonServices.CallbackExecutor.Implementation;
using Limp.Client.Services.HubServices.CommonServices.SubscriptionService;
using Limp.Client.Services.HubServices.CommonServices.SubscriptionService.Implementation;
using Limp.Client.Services.HubServices.HubServices.Implementations.AuthService;
using Limp.Client.Services.HubServices.HubServices.Implementations.AuthService.Implementation;
using Limp.Client.Services.HubServices.HubServices.Implementations.MessageService;
using Limp.Client.Services.HubServices.HubServices.Implementations.MessageService.Implementation;
using Limp.Client.Services.HubServices.HubServices.Implementations.UsersService;
using Limp.Client.Services.HubServices.HubServices.Implementations.UsersService.Implementation;
using Limp.Client.Services.HubServices.UndeliveredMessageSending;
using Limp.Client.Services.InboxService;
using Limp.Client.Services.InboxService.Implementation;
using Limp.Client.Services.LocalKeyChainService.Implementation;
using Limp.Client.Services.LocalStorageService;
using Limp.Client.Services.NotificationService;
using Limp.Client.Services.NotificationService.Implementation;
using Limp.Client.Services.UndeliveredMessagesStore;
using Limp.Client.Services.UndeliveredMessagesStore.Implementation;
using Limp.Client.Services.UserAgent.Implementation;
using Limp.Client.Services.UserAgentService;
using Ljbc1994.Blazor.IntersectionObserver;
using Microsoft.AspNetCore.Components.Web;
using Microsoft.AspNetCore.Components.WebAssembly.Hosting;

var builder = WebAssemblyHostBuilder.CreateDefault(args);
builder.RootComponents.Add<App>("#app");
builder.RootComponents.Add<HeadOutlet>("head::after");

builder.Services.AddBlazorBootstrap();
builder.Services.AddScoped(sp => new HttpClient { BaseAddress = new Uri(builder.HostEnvironment.BaseAddress) });
builder.Services.AddSingleton<ICryptographyService, CryptographyService>();
builder.Services.AddSingleton<IMessageBox, MessageBox>();
builder.Services.AddTransient<IMessageDecryptor, MessageDecryptor>();
builder.Services.AddTransient<IAESOfferHandler, AESOfferHandler>();
builder.Services.AddTransient<IEventCallbackExecutor, EventCallbackExecutor>();
builder.Services.AddTransient<IContactsProvider, ContactsProvider>();
builder.Services.AddTransient<IConcurrentCollectionManager, ConcurrentCollectionManager>();
builder.Services.AddSingleton<IAuthService, AuthService>();
builder.Services.AddSingleton<IUsersService, UsersService>();
builder.Services.AddSingleton<IMessageService, MessageService>();
builder.Services.AddSingleton<IHubServiceSubscriptionManager, HubServiceSubscriptionManager>();
builder.Services.AddTransient<ICallbackExecutor, CallbackExecutor>();
builder.Services.AddTransient<IMessageBuilder, MessageBuilder>();
builder.Services.AddTransient<IBrowserKeyStorage, BrowserKeyStorage>();
builder.Services.AddTransient<IUndeliveredMessagesRepository, UndeliveredMessagesRepository>();
builder.Services.AddTransient<IUndeliveredMessageService, UndeliveredMessageService>();
builder.Services.AddTransient<ILoginHandler, LoginHandler>();
builder.Services.AddTransient<IWebPushService, WebPushService>();
builder.Services.AddTransient<ILocalStorageService,  LocalStorageService>();
builder.Services.AddTransient<IUserAgentService, UserAgentService>();
builder.Services.AddTransient<IPackageFormerService, PackageFormerService>();
builder.Services.AddBlazoredToast();
builder.Services.AddIntersectionObserver();

await builder.Build().RunAsync();
