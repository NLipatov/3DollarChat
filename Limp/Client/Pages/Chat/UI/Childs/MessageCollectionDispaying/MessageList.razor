@using Ethachat.Client.Services.HubServices.CommonServices.SubscriptionService;
@using Ethachat.Client.Services.InboxService;
@using Ethachat.Client.Pages.Chat.UI.Childs.MessageCollectionDispaying.Childs
@using Ethachat.Client.Services.HubServices.HubServices.Implementations.MessageService
@using EthachatShared.Models.Message;
@inject IMessageBox _messageBox
@inject IHubServiceSubscriptionManager _hubServiceSubscriptionManager
@inject IJSRuntime _jSRuntime
@inject IMessageService _messageService
@implements IDisposable

<div class="messages-box">
    <Virtualize 
        Context="message"
        Items="_messageBox.Messages
            .Where(x=>x.Type is not MessageType.Metadata)
            .Where(x => x.TargetGroup == targetGroup || x.Sender == targetGroup)
            .ToList()" >
        <SingleMessage message="message" myUsername=@myUsername/>
    </Virtualize>
</div>

@code {

    [Parameter]
    public string targetGroup { get; set; } = string.Empty;

    [Parameter]
    public string myUsername { get; set; } = string.Empty;

    private Guid ComponentId { get; set; }

    public void Dispose() => _hubServiceSubscriptionManager.RemoveComponentCallbacks(ComponentId);

    protected override async Task OnInitializedAsync()
    {
        ComponentId = Guid.NewGuid();
        SubscribeToHubEvents();
    }

    private void SubscribeToHubEvents()
    {
        _hubServiceSubscriptionManager
            .AddCallback<Guid>(MarkAsReceived, "OnReceiverMarkedMessageAsReceived", ComponentId);
        
        _hubServiceSubscriptionManager
            .AddCallback(AddMessageAsync, "MessageBoxUpdate", ComponentId);
        
        _hubServiceSubscriptionManager
            .AddCallback<Guid>(MessageRegisteredByHub, "MessageRegisteredByHub", ComponentId);
    }

    public async Task MessageRegisteredByHub(Guid id)
    {
        await _messageBox.OnRegistered(id);

        StateHasChanged();
    }

    public async Task MarkAsReceived(Guid messageId)
    {
        await _messageBox.OnDelivered(messageId);

        StateHasChanged();
    }

    public async Task AddMessageAsync()
    {
        StateHasChanged();

        await ScrollToLastMessage();
    }

    private async Task ScrollToLastMessage()
    {
        string jsCode =
            @"var messagesBox = document.querySelector('.messages-box');
        messagesBox.scrollTop = messagesBox.scrollHeight;";

        await _jSRuntime.InvokeVoidAsync("eval", jsCode);
    }

}