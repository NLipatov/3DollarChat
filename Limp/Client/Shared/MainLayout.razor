@using Ethachat.Client.Shared.ErrorCatching
@using Ethachat.Client.Cryptography;
@using Ethachat.Client.Services.AuthenticationService.Handlers
@using Ethachat.Client.Services.HubServices.CommonServices.SubscriptionService;
@using Ethachat.Client.Services.InboxService;
@using Ethachat.Client.Shared.ChildComponents
@using EthachatShared.Models.Message
@inherits LayoutComponentBase
@inject ICryptographyService _cryptographyService
@inject IToastService _toastService
@inject IHubServiceSubscriptionManager _hubServiceSubscriptionManager
@inject IMessageBox _messageBox
@inject NavigationManager _navigationManager
@inject IAuthenticationHandler AuthenticationHandler

@if (!isRSAGenerated)
{
    <div class="RSACalculatingWarning">
        <p>
            Generating RSA keys...
        </p>
    </div>
}
else
{
    <div class="ApplicationContent">
        <SidebarMenu/>
        <div style="width: 100%;">
            <GlobalErrorBoundary>
                @Body
            </GlobalErrorBoundary>
        </div>
    </div>
}

<BlazoredToasts
    Position="Blazored.Toast.Configuration.ToastPosition.BottomRight"
    Timeout="2"/>

@code{
    private bool isRSAGenerated = false;
    private Guid ComponentId { get; set; }
    public void Dispose() => _hubServiceSubscriptionManager.RemoveComponentCallbacks(ComponentId);

    protected override async Task OnInitializedAsync()
    {
        //This id will be needed on dispose stage
        //On dispose stage we need to clear out all of the component event subscriptions
        ComponentId = Guid.NewGuid();

        //Subscribing to server event of updating online users
        _hubServiceSubscriptionManager.AddCallback(ShowMessageToast, "MessageBoxUpdate", ComponentId);

        await _cryptographyService.GenerateRsaKeyPairAsync();
        isRSAGenerated = true;
        StateHasChanged();
    }

    private async void ShowMessageToast()
    {
        var currentUsername = await AuthenticationHandler.GetUsernameAsync();
        var notToastedMessages = _messageBox
            .Messages
            .Where(x => x.Sender != currentUsername)
            .Where(x => x.IsToastShown == false);

        foreach (var message in notToastedMessages)
        {
            //If chat with sender is opened - no need to show a toast
            if (_navigationManager.Uri.Contains($"{message.Sender}"))
            {
                _messageBox.OnToastWasShown(message.Id);
                return;
            }

            switch (message.Type)
            {
                case MessageType.Metadata:
                    var fileName = message.Metadata?.Filename ?? "BinaryFile";
                    _toastService.ShowInfo(message.Sender + ": " + fileName);
                    break;
                case MessageType.TextMessage:
                    _toastService.ShowInfo(message.Sender + ": " + message.PlainText);
                    break;
                default:
                    return;
            }

            _messageBox.OnToastWasShown(message.Id);
        }
    }

}