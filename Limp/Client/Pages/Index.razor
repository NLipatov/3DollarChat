@page "/"
@using Limp.Client.Cryptography;
@using Limp.Client.Cryptography.CryptoHandlers.Handlers;
@using Limp.Client.Cryptography.CryptoHandlers.Models;
@using Limp.Client.Cryptography.KeyStorage;
@using LimpShared.Encryption;
@inject NavigationManager Navigation
@inject IJSRuntime _js;
@inject ICryptographyService _cryptographyService;
<PageTitle>Index</PageTitle>

<h1>RSA Encryption</h1>
<input @bind="RSAinputValue" @bind:event="oninput" />
<button @onclick="(() => RSAEncrypt())">
    Encrypt
</button>
<button @onclick="(() => RSADecrypt())">
    Decrypt
</button>
<h1>AES Encryption</h1>
<input @bind="AESinputValue" @bind:event="oninput" />
<button @onclick="(() => AESEncrypt())">
    Encrypt
</button>
<button @onclick="(() => AESDecrypt())">
    Decrypt
</button>


@code {
    private string RSAinputValue { get; set; } = string.Empty;
    private string AESinputValue { get; set; } = string.Empty;
    //private CryptographyService _cryptographyService { get; set; }
    private string demoContact = "demo";

    protected override async Task OnInitializedAsync()
    {
        //_cryptographyService = new(_js);
        await _cryptographyService.GenerateRSAKeyPairAsync();
        await _cryptographyService.GenerateAESKeyAsync(demoContact, (key) =>
        {
            Console.WriteLine(key);
        });
    }

    public async Task RSAEncrypt()
    {
        RSAinputValue = (await _cryptographyService.EncryptAsync<RSAHandler>(new Cryptogramm() { Cyphertext = RSAinputValue })).Cyphertext;
    }

    public async Task RSADecrypt()
    {
        RSAinputValue = (await _cryptographyService.DecryptAsync<RSAHandler>(new Cryptogramm() { Cyphertext = RSAinputValue })).PlainText;
    }

    public async Task AESEncrypt()
    {
        AESinputValue = (await _cryptographyService.EncryptAsync<AESHandler>(new Cryptogramm() { Cyphertext = AESinputValue }, demoContact)).Cyphertext;
    }

    public async Task AESDecrypt()
    {
        AESinputValue = (await _cryptographyService.DecryptAsync<AESHandler>(new Cryptogramm() { Cyphertext = AESinputValue }, demoContact)).PlainText;
    }
}