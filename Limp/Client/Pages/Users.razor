@page "/users"
@using Limp.Client.HubConnectionManagement.ConnectionHandlers.HubInteraction.Implementations;
@using Limp.Client.HubConnectionManagement.HubObservers.Implementations.MessageHub.EventTypes;
@using Limp.Client.HubInteraction.Handlers;
@using Limp.Client.HubInteraction;
@using ClientServerCommon.Models;
@using Limp.Client.Cryptography;
@using Limp.Client.Cryptography.KeyStorage;
@using Limp.Client.HubInteraction.Handlers.Helpers;
@using Limp.Client.HubInteraction.Handlers.MessageDispatcherHub.AESOfferHandling;
@using Limp.Client.HubInteraction.HubObservers.Implementations.AuthHub;
@using Limp.Client.HubInteraction.HubObservers.Implementations.AuthHub.EventTypes;
@using Limp.Client.HubInteraction.HubObservers.Implementations.UsersHubObserver.EventTypes;
@using Limp.Client.HubInteraction.HubObservers;
@using Limp.Client.Services.HubConnectionProvider;
@using Limp.Client.TopicStorage;
@using LimpShared.Authentification;
@using Microsoft.AspNetCore.SignalR.Client;
@using Limp.Client.UIComponents.ContactItem;
@using ClientServerCommon.Models.Login;
@using System.Collections.Concurrent;
@inject NavigationManager _navigationManager
@inject ICryptographyService _cryptographyService
@inject IMessageBox _messageBox
@inject IAESOfferHandler _aesOfferHandler
@inject IJSRuntime _jS
@inject IHubObserver<UsersHubEvent> _usersHubObserver
@inject IHubObserver<AuthHubEvent> _authHubObserver
@inject IHubObserver<MessageHubEvent> _messageDispatcherHubObserver 
@inject IHubConnectionProvider _hubConnectionProvider
@implements IAsyncDisposable

<PageTitle>Users Online</PageTitle>

<div style="padding: 0.5rem 1rem;">
    @foreach (var connection in userConnections.Where(x=>!x.ConnectionIds.Contains(myConnectionId) && x.ConnectionIds.Count > 0))
    {
        <ContactBar
            Username="@connection.Username"
            IsOnline="true"
            OnClickCallback="@(()=>_navigationManager.NavigateTo($"user/{connection.Username}"))"/>
    }
</div>

@code {
    private ConcurrentBag<UserConnection> userConnections { get; set; } = new();
    private string myConnectionId { get; set; } = string.Empty;
    private HubConnection? usersHubConnection;

    private async Task HandleMyConnectionIdUpdate(string id)
    {
        myConnectionId = id;
    }

    protected override async Task OnInitializedAsync()
    {
        await _hubConnectionProvider.ConnectToHubs
        (OnUserConnectionsUpdate: HandleUserConnectionsUpdate,
        OnConnectionIdUpdate: HandleMyConnectionIdUpdate);
    }

    private async Task HandleUserConnectionsUpdate(List<UserConnection> updatedUserConnections)
    {
        userConnections.Clear();
        foreach (var connection in updatedUserConnections)
        {
            userConnections.Add(connection);
        }
        StateHasChanged();
    }

    private void Rerender()
    {
        StateHasChanged();
    }

    public async ValueTask DisposeAsync()
    {
        await _hubConnectionProvider.DisposeAsync();
    }
}
