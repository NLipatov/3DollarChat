@using Ethachat.Client.Services.Authentication.Handlers
@using Ethachat.Client.Services.HubServices.CommonServices.CallbackExecutor
@using Ethachat.Client.Services.HubServices.CommonServices.SubscriptionService;
@using Ethachat.Client.Services.InboxService;
@using EthachatShared.Models.Message
@using Ethachat.Client.UI.ErrorBoundary
@inherits LayoutComponentBase
@inject IToastService _toastService
@inject IHubServiceSubscriptionManager _hubServiceSubscriptionManager
@inject IMessageBox _messageBox
@inject NavigationManager _navigationManager
@inject IAuthenticationHandler AuthenticationHandler
@inject ICallbackExecutor CallbackExecutor


<div class="ApplicationContent">
    <Ethachat.Client.UI.Shared.Sidebar.Sidebar/>
    <div class="ApplicationBody">
        <GlobalErrorBoundary>
            @Body
        </GlobalErrorBoundary>
    </div>
</div>

<BlazoredToasts
    Position="Blazored.Toast.Configuration.ToastPosition.BottomRight"
    Timeout="2"/>

@code{
    private Guid ComponentId { get; set; }
    public void Dispose() => _hubServiceSubscriptionManager.RemoveComponentCallbacks(ComponentId);
    private static Action<bool>? AppVisibilityStateChangedDelegate { get; set; }

    protected override async Task OnInitializedAsync()
    {
        //This id will be needed on dispose stage
        //On dispose stage we need to clear out all the component event subscriptions
        ComponentId = Guid.NewGuid();

        //Subscribing to server event of updating online users
        _hubServiceSubscriptionManager.AddCallback(ShowMessageToast, "MessageBoxUpdate", ComponentId);

        AppVisibilityStateChangedDelegate = isVisible
            => CallbackExecutor.ExecuteSubscriptionsByName(isVisible, "AppVisibilityStateChanged");


        StateHasChanged();
    }

    private async void ShowMessageToast()
    {
        var currentUsername = await AuthenticationHandler.GetUsernameAsync();
        var notToastedMessages = _messageBox
            .Messages
            .Where(x => x.Sender != currentUsername)
            .Where(x => x.IsToastShown == false);

        foreach (var message in notToastedMessages)
        {
            //If chat with sender is opened - no need to show a toast
            if (_navigationManager.Uri.Contains($"{message.Sender}"))
            {
                _messageBox.OnToastWasShown(message.Id);
                return;
            }

            switch (message.Type)
            {
                case MessageType.HLSPlaylist:
                    _toastService.ShowInfo(message.Sender + "sent a video");
                    break;
                case MessageType.Metadata or MessageType.BlobLink:
                    var fileName = message.Metadata?.Filename ?? "BinaryFile";
                    _toastService.ShowInfo(message.Sender + ": " + fileName);
                    break;
                case MessageType.TextMessage:
                    _toastService.ShowInfo(message.Sender + ": " + message.PlainText);
                    break;
                default:
                    return;
            }

            _messageBox.OnToastWasShown(message.Id);
        }
    }

    [JSInvokable]
    public static void OnVisibilityChange(bool isVisible)
    {
        AppVisibilityStateChangedDelegate?.Invoke(isVisible);
    }

}