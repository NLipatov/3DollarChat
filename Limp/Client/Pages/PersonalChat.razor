@page "/user/{topicName?}"
@using ClientServerCommon.Models;
@using ClientServerCommon.Models.Message;
@using Limp.Client.Cryptography.CryptoHandlers.Handlers;
@using Limp.Client.Cryptography.KeyStorage;
@using Limp.Client.HubConnectionManagement.ConnectionHandlers.HubInteraction.Implementations;
@using Limp.Client.HubInteraction.Handlers;
@using Limp.Client.HubInteraction;
@using Limp.Client.HubInteraction.HubObservers.Implementations.UsersHubObserver.EventTypes;
@using Limp.Client.HubInteraction.HubObservers;
@using Microsoft.AspNetCore.SignalR.Client;
@using Limp.Client.Cryptography;
@using Limp.Client.HubInteraction.Handlers.MessageDecryption;
@using Limp.Client.HubInteraction.Handlers.MessageDispatcherHub.AESOfferHandling;
@using Limp.Client.TopicStorage;
@using LimpShared.Encryption;
@using Limp.Client.Utilities;
@using Limp.Client.Pages;
@inject NavigationManager Navigation
@inject IJSRuntime jS;
@inject ICryptographyService _cryptographyService
@inject IMessageDecryptor _messageDecryptor
@inject IMessageBox _messageBox
@inject IAESOfferHandler _aesOfferHandler
@inject IHubObserver<UsersHubEvent> _usersHubSubscriptionManager
@implements IAsyncDisposable

<PageTitle>Chat with @topicName</PageTitle>

<div class="page-container">
    @if (!isAcceptedAESKeyExists)
    {
        <KeyTransfer 
            IsThereAnAESKey=isAcceptedAESKeyExists/>
    }
    else
    {
        <div class="header">
            <span>@topicName</span>
        </div>

        <div class="messages-box">
            @foreach (var message in messages.Where(x=>x.Type == MessageType.UserMessage))
            {
                bool isOutcoming = message.Sender == "You";
                string messageClass = isOutcoming ? "outcoming" : "incoming";
                <div class="message @messageClass">
                    <span>@(message.Payload)</span>
                </div>
                <div class="timestamp @messageClass">
                    <span>@message.DateSent.ToString("hh:mm")</span>
                    @if (message.IsReceived)
                    {
                        <span>R</span>
                    }
                </div>

            }
        </div>

        <div class="message-input-box">
            <input @bind="messageInput" />
            <button @onclick="async () => await SendMessage()" disabled="@(!IsConnectedToMessageDispatcherHub || string.IsNullOrWhiteSpace(myName))">Send</button>
        </div>
    }
</div>

@code {
    [Parameter]
    public string topicName { get; set; }
    [Parameter]
    public string? myName { get; set; }
    private HubConnection? messageDispatcherHub;
    public bool IsConnectedToMessageDispatcherHub => messageDispatcherHub?.State == HubConnectionState.Connected;
    private List<Message> messages { get; set; } = new();
    private string messageInput = string.Empty;
    private List<UserConnection> userConnections { get; set; } = new();
    HubInteractor? _hubInteractor;
    private bool isAcceptedAESKeyExists { get; set; } = false;
    private UsersHubInteractor? _usersHubHandler;

    protected override async Task OnInitializedAsync()
    {
        _hubInteractor = new(Navigation, jS, _messageBox, _aesOfferHandler);

        _usersHubHandler = new(Navigation, jS, _usersHubSubscriptionManager);

        _usersHubSubscriptionManager.AddHandler<List<UserConnection>>(UsersHubEvent.ConnectedUsersListReceived, 
        async (userConnectionsList) =>
        {
            userConnections = userConnectionsList;
            StateHasChanged();
        });

        await _usersHubHandler.ConnectAsync();

        await ConnectToHubsAsync();

        LoadPreviousMessagesForThisTopic();
    }

    private async Task ConnectToHubsAsync()
    {
        messageDispatcherHub = await _hubInteractor.ConnectToMessageDispatcherHubAsync
        (OnMessageReceived, 
        OnUsernameResolve, 
        onMessageReceivedByRecepient, 
        cryptographyService: _cryptographyService, 
        OnAESAcceptedCallback: OnAESKeyReadyAsync);
    }

    private async Task GetAnAESKeyForConversation()
    {
        if (InMemoryKeyStorage.AESKeyStorage.FirstOrDefault(x => x.Key == topicName).Value == null)
        {
            Console.WriteLine($"There is no existing AES key for conversation. Let's create one");
            //This will get partners public key and generate an AES key for conversation
            await _hubInteractor.GetPartnerPublicKey(topicName);
        }
        else
        {
            Console.WriteLine($"There is an existing AES key for conversation: {InMemoryKeyStorage.AESKeyStorage.FirstOrDefault(x => x.Key == topicName).Value.Value.ToString()}");
            isAcceptedAESKeyExists = true;
            StateHasChanged();
        }
    }

    private async Task OnAESKeyReadyAsync()
    {
        InMemoryKeyStorage.AESKeyStorage.First(x => x.Key == topicName).Value.IsAccepted = true;
        string? keyForConversation = InMemoryKeyStorage.AESKeyStorage.FirstOrDefault(x => x.Key == topicName).Value?.Value?.ToString();
        isAcceptedAESKeyExists = !string.IsNullOrWhiteSpace(keyForConversation);
        StateHasChanged();
    }

    private void onMessageReceivedByRecepient(Guid messageId)
    {
        Message? receivedMessage = messages.FirstOrDefault(x => x.Id == messageId);
        if(receivedMessage != null)
        {
            receivedMessage.IsReceived = true;
            StateHasChanged();
        }
    }

    private void LoadPreviousMessagesForThisTopic()
    {
        if (string.IsNullOrWhiteSpace(topicName))
        {
            throw new ApplicationException("Chat topic name was not resolved, could not messages from this topic.");
        }

        var messagesFromMessageBox = _hubInteractor.LoadStoredMessages(topicName);
        messages.AddRange(messagesFromMessageBox);
    }

    private async Task OnUsernameResolve(string username)
    {
        myName = username;
        await GetAnAESKeyForConversation();
        StateHasChanged();
    }

    private async Task OnMessageReceived(Message message)
    {
        if (message.Sender == "You")
            return;

        if(message.Type == MessageType.UserMessage)
        {
            messages.Add(message);
            StateHasChanged();
        }
    }

    private async Task SendMessage()
    {
        if (string.IsNullOrWhiteSpace(messageInput))
            return;

        Cryptogramm cryptogramm = await _cryptographyService
        .EncryptAsync<AESHandler>(new Cryptogramm() { Cyphertext = messageInput }, contact: topicName);

        Message messageToSend = new Message
        {
            Topic = topicName,
            Cryptogramm = cryptogramm,
            DateSent = DateTime.UtcNow,
            TargetGroup = topicName!,
            Sender = myName ?? throw new ApplicationException("Message was not send"),
        };

        await _hubInteractor.SendMessage(messageToSend);

        messageToSend.Payload = messageInput;
        messageToSend.Sender = "You";
        messages.Add(messageToSend);
        await _messageBox.AddMessageAsync(messageToSend, isEncrypted: false);

        messageInput = string.Empty;
    }

    public async ValueTask DisposeAsync()
    {
        _usersHubHandler?.DisposeAsync();
        if(_hubInteractor != null)
        {
            await _hubInteractor.DisposeAsync();
        }
    }
}
