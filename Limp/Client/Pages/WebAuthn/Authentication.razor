@page "/signin/webauthn"
@page "/signup/webauthn"
@using Limp.Client.Services.HubServices.HubServices.Implementations.AuthService
@using Limp.Client.Services.HubServices.CommonServices.SubscriptionService
@using Limp.Client.UIComponents.InputForms.Registration;
@using Limp.Client.UIComponents.InputForms.Login;
@using LimpShared.Models.Authentication.Models.UserAuthentication
@inject IJSRuntime js;
@inject IAuthService authService
@inject IHubServiceSubscriptionManager _hubServiceSubscriptionManager
@implements IDisposable

@if (string.IsNullOrWhiteSpace(AuthorisationServerAddress))
{
    <span>Loading</span>
}
else
{
    <RegistrationForm 
        OnRegisterEvent="async (dto) => await OnRegister(dto)"
        IsAuthenticationMethodRequiresPassword="false"/>
    
    <LoginForm
        OnLoginEvent="async (dto) => await OnLogin(dto)"
        IsWebAuthnUsed="true"/>
}

@code {
    private IJSObjectReference? module;
    private Guid ComponentId { get; set; }
    private string AuthorisationServerAddress { get; set; } = string.Empty;
    private string Username { get; set; }
    private string DisplayName { get; set; } = string.Empty;

    public void Dispose() => _hubServiceSubscriptionManager.RemoveComponentCallbacks(ComponentId);

    protected override async Task OnInitializedAsync()
    {
    //This id will be needed on dispose stage
    //On dispose stage we need to clear out all of the component event subscriptions
        ComponentId = Guid.NewGuid();
        SubscribeToHubEvents();
        await authService.GetAuthorisationServerAddress();

        await base.OnInitializedAsync();
    }

    private void SubscribeToHubEvents()
    {
        _hubServiceSubscriptionManager.AddCallback<string>(OnAuthorisationServerAddressIsResolved, "OnAuthorisationServerAddressResponse", ComponentId);
    }

    private async Task OnAuthorisationServerAddressIsResolved(string address)
    {
        await js.InvokeVoidAsync("setServiceAddress", address);
        AuthorisationServerAddress = address;
        StateHasChanged();
    }

    private async Task OnRegister(UserAuthentication newUserDTO)
    {
        await js.InvokeVoidAsync("handleRegisterSubmit", newUserDTO.Username, newUserDTO.Username);
    }

    private async Task OnLogin(UserAuthentication userDTO)
    {
        await js.InvokeVoidAsync("handleSignInSubmit", userDTO.Username);
    }
}