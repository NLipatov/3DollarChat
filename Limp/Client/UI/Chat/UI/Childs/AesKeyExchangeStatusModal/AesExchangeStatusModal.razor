@using EthachatShared.Models.ConnectedUsersManaging
@using Ethachat.Client.Services.KeyStorageService.Implementations
@using EthachatShared.Encryption
@inherits Ethachat.Client.UI.CommonComponents.BaseComponents.BaseEventListeningComponent
@inject IJSRuntime jSRuntime

@if (!KeyExist)
{
    @if (IsPartnerOnline)
    {
        <div class="card-holder">
            <Card
                Title="AES exchange"
                Text="Now we are exchanging the key for encrypting messages"/>
        </div>
    }
    else
    {
        <div class="card-holder">
            <Card
                Title="AES exchange"
                Text="AES exchange is not possible - Your partner is offline"/>
        </div>
    }
}

@code {
    [Parameter] public string PartnerUsername { get; set; } = string.Empty;
    [Parameter] public bool IsPartnerOnline { get; set; }
    private bool KeyExist { get; set; }

    protected override void SubscribeToHubEvents()
    {
        base.SubscribeToHubEvents();
        HubServiceSubscriptionManager.AddCallback<UserConnectionsReport>(OnUsersOnlineUpdate, "ReceiveOnlineUsers", ComponentId);
        HubServiceSubscriptionManager.AddCallback<bool>(OnAESUpdated, "AESUpdated", ComponentId);
    }

    protected override async Task OnInitializedAsync()
    {
        KeyExist = await new LocalStorageKeyStorage(jSRuntime).GetLastAcceptedAsync(PartnerUsername, KeyType.Aes) != null;
        await base.OnInitializedAsync();
    }

    private void OnUsersOnlineUpdate(UserConnectionsReport userConnectionsReport)
    {
        IsPartnerOnline = userConnectionsReport.UserConnections
            .Select(x => x.Username)
            .Contains(PartnerUsername);
    }

    private async Task OnAESUpdated(bool keyRenewed)
    {
        KeyExist = await new LocalStorageKeyStorage(jSRuntime).GetLastAcceptedAsync(PartnerUsername, KeyType.Aes) != null;
        StateHasChanged();
    }


}