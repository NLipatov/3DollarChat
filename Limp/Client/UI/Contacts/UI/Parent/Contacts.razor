@page "/contacts"
@using Ethachat.Client.Services.AuthenticationService.Handlers
@using Ethachat.Client.UI.AuthenticationChecks
@using Ethachat.Client.Services.HubServices.CommonServices.SubscriptionService;
@using Ethachat.Client.Services.HubServices.HubServices.Implementations.UsersService
@using Ethachat.Client.Services.InboxService;
@using EthachatShared.Models.ConnectedUsersManaging
@using Ethachat.Client.UI.Contacts.UI.Child;
@using Ethachat.Client.Services.ContactsProvider;
@using Ethachat.Client.Services.KeyStorageService.Implementations
@using Ethachat.Client.UI.Chat.UI.Childs.ChatHeader.Indicators
@inject NavigationManager _navigationManager;
@inject IContactsProvider _contactsProvider;
@inject IUsersService _usersService
@inject IHubServiceSubscriptionManager _hubServiceSubscriptionManager
@inject IJSRuntime _jSRuntime;
@inject IMessageBox _messageBox
@inject IAuthenticationHandler AuthenticationHandler
@using Ethachat.Client.UI.Shared.ReuseableComponents.EditableList;
@using Ethachat.Client.UI.Contacts.Models
@using Ethachat.Client.UI.Shared.ReuseableComponents.EditableList.Models
@using EthachatShared.Models.Users;
@using Ethachat.Client.UI.Shared.Callout
@using EthachatShared.Encryption
@using CalloutType = Ethachat.Client.UI.Shared.Callout.CalloutType
@implements IDisposable

<AuthenticatedView>
    <AuthenticatedContent>
        <div class="p-2" style="  
            width: 100%;
            height: 100%;
            overflow: auto;">
            <div style="display: flex;
                    flex-direction: column;
                    gap: 10px;">
                <SearchForContact 
                    OnNewContactSearch="OnAddContactAttempt" />

                @if(ContactsList.Any())
                {
                    <EditableList 
                        itemCollection=@(ContactsList
                            .Select(x=> new ItemModel
                            {
                                IsActive = x.IsOnline, 
                                IsEncryptionSettedUp = x.IsKeyReady, 
                                ItemName = x.Username,
                                Icons = [x.IsTrusted ? new CustomIcon{Name="shield", Color="green"} : new CustomIcon{Name="shield", Color="red"}],
                                BadgeModel = GetContactBadge(x),
                                ShowBadge = x.UnreadedMessagesCount > 0,
                                AvatarOnlineIndicator = new AvatarOnlineIndicator
                                    {
                                        PartnerUsername = x.Username
                                    }, 
                                    })
                            .ToList())
                        OnItemClicked="NavigateToChatWithContact"
                        OnItemRemoved="RemoveContact" 
                        ListHeader="Contacts:"
                        IconClass="bi bi-person-fill"/>
                }
                else
                {
                    <CustomCallout 
                        CalloutType="CalloutType.Idea"
                        CalloutBody="Add someone and start a new chat!"
                        CalloutTitle="Your contact book is empty"/>
                }
            </div>
        </div>

        @if (contactAdditionModal is not null)
        {
            <ConfirmContactAdditionModal 
                @ref="contactAdditionModal"
                OnContactAddition="HandleContactAddition"/>
        }
    </AuthenticatedContent>
    <UnauthenticatedContent>
        <UnAuthorized/>
    </UnauthenticatedContent>
</AuthenticatedView>

@code {
    private ConfirmContactAdditionModal? contactAdditionModal { get; set; }
    private List<Contact> ContactsList = new();
    private bool contactEditionMode = false;
    private Guid ComponentId { get; set; }
    private UserConnectionsReport _usersOnlineMessage { get; set; } = new();

    public void Dispose() => _hubServiceSubscriptionManager.RemoveComponentCallbacks(ComponentId);

    private void ToggleEditContactsMode() => contactEditionMode = !contactEditionMode;

    public void NavigateToChatWithContact(ItemModel itemModel) 
        => _navigationManager.NavigateTo($"{itemModel.ItemName}");

    private BadgeModel GetContactBadge(Contact contact)
    {
        return new()
        {
            Text = contact.UnreadedMessagesCount.ToString(),
            InlineStyles = "background-color: white; color: black; margin-left: auto;"
        };
    }

    private async Task RemoveContact(ItemModel itemModel)
    {
        //Get contact out of client's browser local storage
        await _contactsProvider.RemoveContact(itemModel.ItemName, _jSRuntime);

        ContactsList = ContactsList.Where(x=>x.Username != itemModel.ItemName).ToList();

        //If there is no one in contact book left, toggle change mode back to false automatically
        if(!(await _contactsProvider.GetContacts(_jSRuntime)).Any())
        {
            ToggleEditContactsMode();
        }

        //update displayed contacts in UI component
        await _usersService.ActualizeConnectedUsersAsync();
    }

    private async Task OnAddContactAttempt(string username)
    {
        await _usersService.CheckIfUserExists(username);
    }

    private async Task HandleExistingUserAdditionToContacts(IsUserExistDto isUserExistDTO)
    {
        ContactAdditionModalDTO modalDTO = new()
            {
                IsUserExists = isUserExistDTO.IsExist,
                NewContactUsername = isUserExistDTO.Username
            };

        await contactAdditionModal!.ShowModalWithBodyTextAsync(modalDTO);
    }

    private async Task HandleContactAddition(string username)
    {
        await _contactsProvider.AddContact(new Contact
        {
            Username = username,
        }, _jSRuntime);
        await _usersService.ActualizeConnectedUsersAsync();
        contactAdditionModal!.HideModal();
    }

    protected override async Task OnInitializedAsync()
    {
        if (!await AuthenticationHandler.IsSetToUseAsync())
            return;
        
        contactAdditionModal = new();
        
        //This id will be needed on dispose stage
        //On dispose stage we need to clear out all the component event subscriptions
        ComponentId = Guid.NewGuid();

        //Subscribing to server event of updating online users
        _hubServiceSubscriptionManager
            .AddCallback<UserConnectionsReport>(UpdateContacts, "ReceiveOnlineUsers", ComponentId);

        _hubServiceSubscriptionManager.AddCallback<string>(UpdateContact, "NewUnreadedMessage", ComponentId);

        _hubServiceSubscriptionManager.AddCallback<IsUserExistDto>(HandleExistingUserAdditionToContacts, "UserExistanceResponse", ComponentId);

        //Actualizing list of users that currently online
        await _usersService.ActualizeConnectedUsersAsync();
    }

    private async Task UpdateContacts(UserConnectionsReport updatedUserConnections)
    {
        TryUpdateLastReceivedContacts(updatedUserConnections);

        ContactsList = await _contactsProvider.GetContacts(_jSRuntime);
        foreach (var contact in ContactsList)
        {
            contact.IsOnline = _usersOnlineMessage.UserConnections.Any(x => x.Username == x.Username);
            contact.LastMessage = _messageBox.Messages.MaxBy(x=>x.DateSent)?.DateSent ?? DateTime.UtcNow;
            contact.IsKeyReady = await new LocalStorageKeyStorage(_jSRuntime).GetLastAccepted(contact.Username, KeyType.Aes) != null;
            contact.UnreadedMessagesCount = _messageBox.Messages.Count(x => x.Sender == contact.Username && !x.IsSeen);
        }

        foreach (var contact in ContactsList)
            await UpdateContact(contact.Username);
    }

    private async Task UpdateContact(string contactUsername)
    {
        Contact? contact = ContactsList.FirstOrDefault(x => x.Username == contactUsername);
        if (contact is not null)
        {
            contact.IsKeyReady = await new LocalStorageKeyStorage(_jSRuntime).GetLastAccepted(contact.Username, KeyType.Aes) != null;
            contact.UnreadedMessagesCount = _messageBox.Messages.Where(x => x.Sender == contactUsername && !x.IsSeen).Count();
            StateHasChanged();
        }
    }

    private void TryUpdateLastReceivedContacts(UserConnectionsReport usersOnlineMessage)
    {
        if (!_usersOnlineMessage.UserConnections.Any() || _usersOnlineMessage.FormedAt < usersOnlineMessage.FormedAt)
        {
            _usersOnlineMessage = usersOnlineMessage;
        }
    }
}