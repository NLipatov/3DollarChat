@page "/user/{partnerName?}"
@using Limp.Client.HubInteraction;
@using Limp.Client.Utilities;
@using Limp.Shared.Models;
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager Navigation
@inject IJSRuntime jS;
@implements IAsyncDisposable

<PageTitle>Chat with @partnerName</PageTitle>

<h1>Your chat with @partnerName</h1>

<div>
    <label>You:</label>
    <input @bind="messageInput"/>
    <button @onclick="SendMessage" disabled="@(!IsConnected)">Send</button>
</div>

@foreach (var message in messages)
{
    <div>
        <span>@message.Sender:</span><span>@message.Payload</span>
    </div>
}

@code {
    [Parameter]
    public string? partnerName { get; set; }
    [Parameter]
    public string? myName { get; set; }
    private HubConnection? messageDispatcherConnection;
    private HubConnection? usersHub;
    private List<Message> messages { get; set; } = new();
    private string messageInput = string.Empty; 
    private string myConnectionId { get; set; } = string.Empty;
    private List<UserConnections> userConnections { get; set; } = new();
    private string accessToken = string.Empty;
    public bool IsConnected => messageDispatcherConnection?.State == HubConnectionState.Connected;
    HubInteractor? _hubInteractor;

    protected override async Task OnInitializedAsync()
    {
        accessToken = await jS.InvokeAsync<string>("localStorage.getItem", "access-token");

        usersHub = new HubConnectionBuilder()
        .WithUrl(Navigation.ToAbsoluteUri("/usersHub"))
        .Build();

        usersHub.On<List<UserConnections>>("ReceiveOnlineUsers", updatedTrackedUserConnections =>
        {
            userConnections = updatedTrackedUserConnections;
            StateHasChanged();
        });

        usersHub.On<string>("ReceiveConnectionId", conId =>
        {
            myConnectionId = conId;
            StateHasChanged();
        });

        await usersHub.StartAsync();

        await usersHub.SendAsync("SetUsername", accessToken);

        _hubInteractor = new(Navigation);
        messageDispatcherConnection = await _hubInteractor.ConnectToMessageDispatcherHubAsync(accessToken, OnMessageReceived, OnUsernameResolve);

        var messagesFromMessageBox = _hubInteractor.LoadStoredMessages(partnerName);
        messages.AddRange(messagesFromMessageBox);
    }

    private void OnUsernameResolve(string username)
    {
        myName = username;
    }

    private void OnMessageReceived(Message message)
    {
        messages.Add(message);
        StateHasChanged();
    }

    private async Task SendMessage()
    {
        if (string.IsNullOrWhiteSpace(messageInput))
            return;

        Message messageToSend = new Message
        {
            Payload = messageInput,
            DateSent = DateTime.UtcNow,
            TargetGroup = partnerName!,
            Sender = myName!,
        };

        await _hubInteractor.SendMessage(messageToSend);

        messageInput = string.Empty;

        messageToSend.Sender = "You";

        messages.Add(messageToSend);

        StateHasChanged();
    }

    public async ValueTask DisposeAsync()
    {
        if(usersHub != null)
        {
            await usersHub.DisposeAsync();
        }
        if(messageDispatcherConnection != null)
        {
            await messageDispatcherConnection.DisposeAsync();
        }
        if(_hubInteractor != null)
        {
            await _hubInteractor.DisposeAsync();
        }
    }
}
