@using Ethachat.Client.Services.Authentication.Boundaries
@using Ethachat.Client.Services.Authentication.Boundaries.Stages
@using Ethachat.Client.Services.Authentication.Handlers
@using Ethachat.Client.Services.HubServices.CommonServices.SubscriptionService
@using Ethachat.Client.Services.HubServices.HubServices.Implementations.AuthService
@using Ethachat.Client.Services.HubServices.HubServices.Implementations.MessageService
@using Ethachat.Client.Services.HubServices.HubServices.Implementations.UsersService
@using Ethachat.Client.Services.LocalStorageService
@inject NavigationManager NavigationManager
@inject IAuthService AuthService
@inject IMessageService MessageService
@inject IUsersService UsersService
@inject ILocalStorageService LocalStorageService
@inject IAuthenticationHandler AuthenticationHandler
@inject IHubServiceSubscriptionManager SubscriptionManager
@inject IAuthenticationManagerBoundary AuthenticationManagerBoundary
@implements IDisposable


@switch (AuthenticationManagerBoundary.AuthenticationState)
{
    case AuthenticationState.TokenActualisation:
        <div class="d-flex flex-column align-items-center text-center">
            <span>
                <CustomIcon
                    Color="white"
                    Name="lock"/>
            </span>
        </div>
        break;
    case AuthenticationState.Authenticated:
        @AuthenticatedContent
        break;
    case AuthenticationState.NotAuthenticated:
        @UnauthenticatedContent
        break;
    default:
        <div class="d-flex flex-column align-items-center text-center">
            <p class="mt-3 mb-0">Unspecified authentication state. Try to reload the page.</p>
        </div>
        break;
}

@code {

    [Parameter] public RenderFragment? AuthenticatedContent { get; set; }

    [Parameter] public RenderFragment? UnauthenticatedContent { get; set; }

    private Guid ComponentId { get; set; }

    public void Dispose() => SubscriptionManager.RemoveComponentCallbacks(ComponentId);

    protected override async Task OnInitializedAsync()
    {
        await AuthenticationManagerBoundary.InitializeAsync();

        ComponentId = Guid.NewGuid();
        SubscriptionManager
            .AddCallback(OnAuthenticationStateHasChanged, "AuthenticationStateHasChanged", ComponentId);

        await base.OnInitializedAsync();
    }

    private void OnAuthenticationStateHasChanged()
    {
        StateHasChanged();
    }

}