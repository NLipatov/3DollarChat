@page "/settings/aes-exchange-settings"
@using Ethachat.Client.Services.ContactsProvider
@using Ethachat.Client.UI.Contacts.Models
@inject IContactsProvider _contactsProvider;
@inject IJSRuntime _JSRuntime
@using Ethachat.Client.UI.Shared.Callout
@using CalloutType = Ethachat.Client.UI.Shared.Callout.CalloutType

<div class="p-2">
    <h3>AES key exchange settings</h3>

    <div class="trusted-contacts-group">
        @if (!_contacts.Any())
        {
            <CustomCallout
                CalloutType="CalloutType.Info"
                CalloutBody="No contacts. Add someone to assign a passphrase."/>
        }
        @foreach (var contact in _contacts.OrderBy(x => x.Username))
        {
            <div>
                @contact.Username
                @if (contact.IsTrusted)
                {
                    <CustomIcon Type="CustomIconType.Solid" Name="user-check" Color="green"/>
                }
                else
                {
                    <CustomIcon Type="CustomIconType.Solid" Name="user-secret" Color="red"/>
                }
            </div>
            <div>
                Passphrase: <input placeholder="Set a trust passphrase" @bind="@contact.TrustedPassphrase" @bind:event="oninput"/>
            </div>
            @if (usernameToPassphrase[contact.Username] != contact.TrustedPassphrase)
            {
                <div>
                    <CustomButton
                        Title="Apply"
                        ButtonType="ButtonType.Success"
                        OnPress="async () => { await _contactsProvider.UpdateContact(contact, _JSRuntime); usernameToPassphrase[contact.Username] = contact.TrustedPassphrase; }"/>
                </div>
            }
        }
    </div>
</div>

@code {
    private Dictionary<string, string> usernameToPassphrase = new();
    private List<Contact> _contacts { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        _contacts = await _contactsProvider.GetContacts(_JSRuntime);

        foreach (var contact in _contacts)
            usernameToPassphrase.Add(contact.Username, contact.TrustedPassphrase);

        await base.OnInitializedAsync();
    }

}