@using System.Text.Json;
@using System.Text;
@using System.Web;
@using Limp.Client.Pages.AccountManagement.LogicHandlers;
@using Limp.Client.Services.HubService.AuthService;
@using Limp.Client.Services.HubServices.CommonServices.SubscriptionService;
@using Limp.Client.UIComponents.InputForms.Login
@using LimpShared.Models.Authentication.Models;
@using LimpShared.Models.Authentication.Models.UserAuthentication;
@using Microsoft.AspNetCore.SignalR.Client;
@inject IConfiguration _configuration;
@inject IJSRuntime js
@inject NavigationManager Navigation
@inject IHubServiceSubscriptionManager _hubServiceSubscriptionManager
@inject IAuthService _authService
@inject ILoginHandler _loginHandler
@page "/login"

<LoginForm 
    OnLoginEvent="async (dto) => await OnLogIn(dto)"
    LoginAttemptResult="lasttokenFetchResult" />

@code {
    private AuthResult? lasttokenFetchResult = new();
    private HubConnection? hubConnection;

    private void HandleOnLogInResponse(AuthResult authResult)
    {
        lasttokenFetchResult = authResult;

        if (lasttokenFetchResult.Result != AuthResultType.Fail)
        {
            lasttokenFetchResult.Message = "You're logged in!";
        }
        else if (string.IsNullOrWhiteSpace(authResult?.JWTPair?.AccessToken) || string.IsNullOrWhiteSpace(authResult?.JWTPair?.RefreshToken?.Token))
        {
            lasttokenFetchResult = new AuthResult
                {
                    Message = "Server authentification response was invalid",
                    Result = AuthResultType.Fail,
                };
        }

        StateHasChanged();
    }

    private async Task OnLogIn(UserAuthentication loggingInUser)
    {
        await _loginHandler.OnLogIn(loggingInUser, HandleOnLogInResponse);
    }
}
