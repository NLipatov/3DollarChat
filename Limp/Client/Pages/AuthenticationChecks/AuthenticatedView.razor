@using Limp.Client.Pages.AuthenticationChecks.Stages;
@using Limp.Client.Services;
@using Limp.Client.Services.AuthenticationService.Handlers
@using Limp.Client.Services.HubServices.CommonServices.CallbackExecutor
@using Limp.Client.Services.HubServices.CommonServices.SubscriptionService
@using Limp.Client.Services.HubServices.HubServices.Implementations.AuthService
@using Limp.Client.Services.HubServices.HubServices.Implementations.MessageService
@using Limp.Client.Services.HubServices.HubServices.Implementations.UsersService
@using Limp.Client.Services.JWTReader;
@using Limp.Client.Services.LocalStorageService
@inject IJSRuntime _jS
@inject IConfiguration _configuration
@inject NavigationManager _navigationManager
@inject IAuthService AuthService
@inject IMessageService MessageService
@inject IUsersService UsersService
@inject ILocalStorageService LocalStorageService
@inject IAuthenticationHandler AuthenticationHandler
@inject IHubServiceSubscriptionManager HubServiceSubscriptionManager
@implements IDisposable

@if (_isUsersHubConnectionActive is false)
{
    <Callout Type="CalloutType.Warning" Heading="No connection">
        <span>Server is not reachable, trying to reconnect</span>
    </Callout>
}
else
{
    @if (_authenticationState == AuthenticationState.TokenActualisation)
    {
        <div class="d-flex flex-column align-items-center text-center">
            <p class="mt-3 mb-0">Checking if you have been authenticated</p>
        </div>
    }
    else
    {
        if (_authenticationState == AuthenticationState.Authenticated)
        {
            @AuthenticatedContent
        }
        else
        {
            @UnauthenticatedContent
        }
    }
}



@code {

    [Parameter]
    public RenderFragment? AuthenticatedContent { get; set; }

    [Parameter]
    public RenderFragment? UnauthenticatedContent { get; set; }

    private bool _isUsersHubConnectionActive = false;
    private AuthenticationState _authenticationState { get; set; } = AuthenticationState.TokenActualisation;
    private Guid ComponentId { get; set; }

    public void Dispose() => HubServiceSubscriptionManager.RemoveComponentCallbacks(ComponentId);

    protected override async Task OnInitializedAsync()
    {
        _isUsersHubConnectionActive = UsersService.IsConnected();
        var authenticationIsReadyToUse = await AuthenticationHandler.IsSetToUseAsync();
        if (!authenticationIsReadyToUse)
        {
            _navigationManager.NavigateTo("signin");
            return;
        }

        HubServiceSubscriptionManager
            .AddCallback<bool>(DecideOnToken, "OnAuthenticationCredentialsValidated", ComponentId);

        HubServiceSubscriptionManager
            .AddCallback<bool>(isActive =>
            {
                _isUsersHubConnectionActive = isActive;
                StateHasChanged();
            }, "OnUsersHubConnectionStatusChanged", ComponentId);

        await AuthenticationHandler.TriggerCredentialsValidation(await AuthService.GetHubConnectionAsync());
    }

    private async Task RefreshTokenAttemptResult(bool isRenewalSucceededCallback)
    {
        //If the refresh token is invalid, the user must log in again
        if (!isRenewalSucceededCallback)
            _authenticationState = AuthenticationState.NotAuthenticated;

        //Else - checking if actualised access token is valid
        await AuthService.ValidateAccessTokenAsync(DecideOnToken);
    }

    private async Task DecideOnToken(bool isAccessTokenValid)
    {
        if (isAccessTokenValid)
        {
            _authenticationState = AuthenticationState.Authenticated;
            await MessageService.GetHubConnectionAsync();
            await UsersService.GetHubConnectionAsync();
        }
        else
        {
            _authenticationState = AuthenticationState.NotAuthenticated;
        }

        StateHasChanged();
    }
}