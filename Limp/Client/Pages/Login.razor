@using System.Text.Json;
@using System.Text;
@using AuthAPI.DTOs.Claims;
@using AuthAPI.DTOs.User;
@using System.Web;
@using ClientServerCommon.Models.Login;
@using Limp.Client.UIComponents.InputForms.Login
@using LimpShared.Authentification;
@using Microsoft.AspNetCore.SignalR.Client;
@inject IConfiguration _configuration;
@inject IJSRuntime js
@inject NavigationManager Navigation
@page "/login"

<LoginForm 
    OnLoginEvent="async (dto) => await OnLogIn(dto)"
    LoginAttemptResult="lasttokenFetchResult" />

@code {
    private AuthResult? lasttokenFetchResult = new();
    private HubConnection? hubConnection;

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
        .WithUrl(Navigation.ToAbsoluteUri("/authHub"))
        .Build();

        hubConnection.On<AuthResult>("OnLoggingIn", async result =>
        {
            lasttokenFetchResult = result;

            if (lasttokenFetchResult.Result != AuthResultType.Fail)
            {
                await StoreTokensAsync(result);
                lasttokenFetchResult.Message = "You're logged in!";
            }

            StateHasChanged();
        });

        await hubConnection.StartAsync();
    }

    private async Task OnLogIn(UserDTO loggingInUser)
    {
        if (hubConnection == null)
            throw new ApplicationException("No connection with Hub.");

        await hubConnection.SendAsync("LogIn", loggingInUser);
    }

    private async Task StoreTokensAsync(AuthResult result)
    {
        if (String.IsNullOrWhiteSpace(result?.JWTPair?.AccessToken) || String.IsNullOrWhiteSpace(result?.JWTPair?.RefreshToken?.Token))
        {
            lasttokenFetchResult = new AuthResult
                {
                    Message = "Authentification server response was invalid",
                    Result = AuthResultType.Fail,
                };
        }

        await js.InvokeVoidAsync("localStorage.setItem", "access-token", result.JWTPair.AccessToken);
        await js.InvokeVoidAsync("localStorage.setItem", "refresh-token", result.JWTPair.RefreshToken.Token);
    }

}
