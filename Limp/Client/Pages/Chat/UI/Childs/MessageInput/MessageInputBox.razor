@using Limp.Client.Pages.Chat.Logic.MessageBuilder;
@using Limp.Client.Services.HubServices.HubServices.Implementations.MessageService
@using Limp.Client.Services.InboxService;
@using System.Text
@using Limp.Client.Cryptography.CryptoHandlers
@using Limp.Client.Cryptography.KeyStorage
@using Limp.Client.HubInteraction.Handlers.MessageDecryption
@using Limp.Client.Services.DataTransmission.PackageForming
@using LimpShared.Encryption
@using LimpShared.Models.Message.DataTransfer
@inject IMessageBuilder _messageBuilder
@inject IMessageService _messageService
@inject IMessageBox _messageBox
@inject IJSRuntime _jSRuntime
@inject IMessageDecryptor _messageDecryptor 
@inject IPackageFormerService _packageFormerService

<div class="message-input-box" @onkeydown="((e)=> OnKeyDown(e))">
    <input @bind="MessageInput" @bind:event="oninput" />
    <InputFile @key="FileInputId" OnChange="OnFileInput" multiple/>
    <button disabled="@(!_messageService.IsConnected())" @onclick="async () => await SendMessage()">Send</button>
</div>

@code {
    [Parameter]
    public string TopicName { get; set; } = string.Empty;
    [Parameter]
    public string MyUsername { get; set; } = string.Empty;
    private string MessageInput { get; set; } = string.Empty;
    private List<DataFile> DataFiles { get; set; } = new();
    public Guid FileInputId = Guid.NewGuid();

    private async Task OnKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
            await SendMessage();
    }

    private async Task OnFileInput(InputFileChangeEventArgs e)
    {
        foreach (var file in e.GetMultipleFiles())
        {
            var dfId = Guid.NewGuid();
            DataFiles.Add(new DataFile()
            {
                Id = dfId,
                Packages = await _packageFormerService.Split(file, 22 * 1024, dfId),
            });
        }
    }

    private async Task SendMessage()
    {
        if (string.IsNullOrWhiteSpace(MessageInput) && !DataFiles.Any() || string.IsNullOrWhiteSpace(TopicName) || string.IsNullOrWhiteSpace(MyUsername))
        {
            MessageInput = string.Empty;
            return;
        }

        if (!string.IsNullOrWhiteSpace(MessageInput))
        {
            await _messageService.SendText(MessageInput, TopicName, MyUsername);
        }
        
        if (DataFiles.Any())
        {
            await _messageService.SendData(DataFiles, TopicName);
            FileInputId = Guid.NewGuid();
        }
        
        MessageInput = string.Empty;
        DataFiles = new(0);
    }
}
