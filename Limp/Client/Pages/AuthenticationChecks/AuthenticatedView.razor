@using Ethachat.Client.Pages.AuthenticationChecks.Stages;
@using Ethachat.Client.Pages.HubConnectionStatus
@using Ethachat.Client.Services;
@using Ethachat.Client.Services.AuthenticationService.Handlers
@using Ethachat.Client.Services.HubServices.CommonServices.CallbackExecutor
@using Ethachat.Client.Services.HubServices.CommonServices.SubscriptionService
@using Ethachat.Client.Services.HubServices.HubServices
@using Ethachat.Client.Services.HubServices.HubServices.Implementations.AuthService
@using Ethachat.Client.Services.HubServices.HubServices.Implementations.MessageService
@using Ethachat.Client.Services.HubServices.HubServices.Implementations.UsersService
@using Ethachat.Client.Services.JWTReader;
@using Ethachat.Client.Services.LocalStorageService
@using EthachatShared.Models.Authentication.Models
@using System.Collections.Concurrent
@inject NavigationManager NavigationManager
@inject IAuthService AuthService
@inject IMessageService MessageService
@inject IUsersService UsersService
@inject ILocalStorageService LocalStorageService
@inject IAuthenticationHandler AuthenticationHandler
@inject IHubServiceSubscriptionManager HubServiceSubscriptionManager
@implements IDisposable

<div>
    @switch (_authenticationState)
    {
        case AuthenticationState.TokenActualisation:
            <div class="d-flex flex-column align-items-center text-center">
                <p class="mt-3 mb-0">Checking if you have been authenticated</p>
            </div>
            break;
        case AuthenticationState.Authenticated:
            @AuthenticatedContent
            break;
        case AuthenticationState.NotAuthenticated:
            @UnauthenticatedContent
            break;
        default:
            <div class="d-flex flex-column align-items-center text-center">
                <p class="mt-3 mb-0">Unspecified authentication state. Try to reload the page.</p>
            </div>
            break;
    }
</div>

@code {

    [Parameter] public RenderFragment? AuthenticatedContent { get; set; }

    [Parameter] public RenderFragment? UnauthenticatedContent { get; set; }

    // private bool IsUsersHubConnectionActive { get; set; }
    // private bool IsMessageHubConnectionActive { get; set; }
    // private bool IsAuthHubConnectionActive { get; set; }
    private AuthenticationState _authenticationState { get; set; } = AuthenticationState.TokenActualisation;
    private Guid ComponentId { get; set; }

    public void Dispose() => HubServiceSubscriptionManager.RemoveComponentCallbacks(ComponentId);

    protected override async Task OnInitializedAsync()
    {
        // IsAuthHubConnectionActive = AuthService.IsConnected();
        // IsUsersHubConnectionActive = UsersService.IsConnected();
        // IsMessageHubConnectionActive = MessageService.IsConnected();
        
        if (!await AuthenticationHandler.IsSetToUseAsync())
        {
            NavigationManager.NavigateTo("signin");
            return;
        }

        HubServiceSubscriptionManager
            .AddCallback<AuthResult>(HandleAuthenticationCheckResult, "OnRefreshCredentials", ComponentId);

        HubServiceSubscriptionManager
            .AddCallback<AuthResult>(HandleAuthenticationCheckResult, "OnValidateCredentials", ComponentId);

        // HubServiceSubscriptionManager
        //     .AddCallback<bool>((state) =>
        //     {
        //         IsAuthHubConnectionActive = state;
        //         StateHasChanged();
        //     }, "OnAuthHubConnectionStatusChanged", ComponentId);
        //
        // HubServiceSubscriptionManager
        //     .AddCallback<bool>((state) =>
        //     {
        //         IsMessageHubConnectionActive = state;
        //         StateHasChanged();
        //     }, "OnMessageHubConnectionStatusChanged", ComponentId);
        //
        // HubServiceSubscriptionManager
        //     .AddCallback<bool>((state) =>
        //     {
        //         IsUsersHubConnectionActive = state;
        //         StateHasChanged();
        //     }, "OnUsersHubConnectionStatusChanged", ComponentId);

        await ValidateCredentials();
    }
    
    private async Task ValidateCredentials()
    {
        await AuthenticationHandler.TriggerCredentialsValidation(await AuthService.GetHubConnectionAsync());
    }
    private async Task HandleAuthenticationCheckResult(AuthResult credentialsValidationResult)
    {
        var isAccessTokenValid = credentialsValidationResult.Result is AuthResultType.Success;
        if (isAccessTokenValid)
        {
            if (_authenticationState is not AuthenticationState.Authenticated)
            {
                await MessageService.GetHubConnectionAsync();
                await UsersService.GetHubConnectionAsync();
                await AuthService.GetHubConnectionAsync();

                _authenticationState = AuthenticationState.Authenticated;
                
                await AuthenticationHandler
                    .ExecutePostCredentialsValidation(credentialsValidationResult, await AuthService.GetHubConnectionAsync());
            }
        }
        else
        {
            _authenticationState = AuthenticationState.NotAuthenticated;
        }
        StateHasChanged();
    }
}