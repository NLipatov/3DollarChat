@using Ethachat.Client.Services.HubServices.HubServices.Implementations.MessageService
@using Ethachat.Client.Services.InboxService;
@using Ethachat.Client.Services.HubServices.CommonServices.CallbackExecutor
@using EthachatShared.Models.Message
@using Ethachat.Client.Services.HubServices.HubServices.Implementations.MessageService.Implementation.Handlers.BinaryReceiving
@using Ethachat.Client.Services.HubServices.HubServices.Implementations.MessageService.Implementation.Handlers.BinarySending
@using Ethachat.Client.Services.VideoStreamingService
@using Ethachat.Client.UI.Chat.UI.Childs.MessageInput.Modals
@using Ethachat.Client.UI.Chat.UI.Childs.MessageInput.Models
@using EthachatShared.Models.Message.ClientToClientTransferData
@using EthachatShared.Models.Message.DataTransfer
@using global::Client.Application.Cryptography
@using global::Client.Application.Cryptography.KeyStorage
@using global::Client.Transfer.Domain.Entities.Events
@using global::Client.Transfer.Domain.Entities.Messages
@inject IMessageService MessageService
@inject IMessageBox MessageBox
@inject IJSRuntime JsRuntime
@inject ICallbackExecutor CallbackExecutor
@inject ICryptographyService CryptographyService
@inject IBinaryReceivingManager BinaryReceivingManager
@inject IHlsStreamingService HlsStreamingService
@inject NavigationManager NavigationManager
@inject IKeyStorage KeyStorage
@inject IBinarySendingManager BinarySendingManager
@implements IAsyncDisposable

<div class="message-input-box">
    <input type="text" class="message-input" placeholder="Send a message..." value="@MessageInput" @oninput="UpdateMessageInput" @onkeydown="HandleKeyDown" />

    <label for="fileinput" class="label-wrapper">
        <span>
            <i class="fas fa-paperclip paperclip-icon"></i>
        </span>
        <InputFile id="fileinput" @key="_fileInputId" OnChange="OnFileInput" style="display: none;" />
    </label>

    <button class="send-button" @onclick="SendMessage">Send</button>
</div>

<CustomModal
    @ref="TooLargeFileModal"
    Title=@($"Maximum file size is {Math.Floor((decimal)MaxFileSizeBytes / 1024000)} MB.")
    Buttons=@( [new CustomButton { Title = "Close", ButtonType = ButtonType.Secondary, OnPress = (TooLargeFileModal is not null ? TooLargeFileModal.Hide : () => { }) }])>
</CustomModal>

<FileEncryptionModal />
<HlsConvertationModal />

@code {
    [Parameter] public string MyUsername { get; set; } = string.Empty;
    [Parameter] public string TopicName { get; set; } = string.Empty;

    private CustomModal? TooLargeFileModal { get; set; }

    private string MessageInput { get; set; } = string.Empty;
    private Guid _fileInputId = Guid.NewGuid();
    private const long MaxFileSizeBytes = long.MaxValue;
    private static Func<IBrowserFile, Task>? SendIBrowserFileDelegate { get; set; } = default;
    private IJSObjectReference? JsModule { get; set; }

    [JSInvokable]
    public static async Task FileFromClipboard(byte[] content, string name, string contentType)
    {
        if (SendIBrowserFileDelegate is not null)
        {
            var browserFile = new ClipboardFile(content, name, contentType);
            await SendIBrowserFileDelegate(browserFile);
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if (JsModule is null)
        {
            var path = "./js/Clipboard/ClipboardInteractor.js";
            JsModule = await JsRuntime.InvokeAsync<IJSObjectReference>("import", path);
        }

        if (firstRender)
        {
            SendIBrowserFileDelegate = SendIBrowserFile;
            await JsModule.InvokeVoidAsync("AddOnPasteEvent");
        }

        BinarySendingManager = new BinarySendingManager(JsRuntime, MessageBox, CallbackExecutor);
    }

    private void UpdateMessageInput(ChangeEventArgs e)
    {
        MessageInput = e.Value?.ToString() ?? string.Empty;
    }

    private async Task HandleKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await SendMessage();
        }
        else
        {
            await MessageService.SendMessage(new EventMessage{Sender = MyUsername, Target = TopicName, Type = EventType.OnTyping});
        }
    }

    private async Task OnFileInput(InputFileChangeEventArgs e)
    {
        //if file exceeds the max size limit
        if (MaxFileSizeBytes - e.File.Size < 0)
        {
            TooLargeFileModal?.Show();
            _fileInputId = Guid.NewGuid();
            return;
        }

        await SendIBrowserFile(e.File);
    }

    private async Task SendIBrowserFile(IBrowserFile browserFile)
    {
        //stream it if it can be streamed
        if (await HlsStreamingService.CanFileBeStreamedAsync(browserFile.Name))
        {
            var playlist = await PostVideoToHlsapiAsync(browserFile);
        
            if (playlist is not null)
            {
                CallbackExecutor.ExecuteSubscriptionsByName(false, "OnIsFileBeingEncrypted");

                var playlistMessage = new HlsPlaylistMessage
                {
                    Id = Guid.NewGuid(),
                    Playlist = playlist.M3U8Content,
                    Target = TopicName,
                    Sender = MyUsername,
                };

                MessageBox.AddMessage(playlistMessage);
        
                await MessageService.TransferAsync(playlistMessage);
                return;
            }
        }

        CallbackExecutor.ExecuteSubscriptionsByName(true, "OnIsFileBeingEncrypted");
        
        byte[] fileBytes;
        await using (var fileStream = browserFile.OpenReadStream(long.MaxValue))
        {
            var memoryStream = new MemoryStream();
            await fileStream.CopyToAsync(memoryStream);
            fileBytes = memoryStream.ToArray();
        }

        var package = new Package
        {
            Id = Guid.NewGuid(),
            Data = fileBytes,
            ContentType = browserFile.ContentType,
            Filename = browserFile.Name,
            Target = TopicName,
            Sender = MyUsername,
        };
        
        await foreach (var dataPartMessage in BinarySendingManager.GetChunksToSendAsync(package))
            _ = Task.Run(async () => await MessageService.TransferAsync(dataPartMessage));
        
        CallbackExecutor.ExecuteSubscriptionsByName(false, "OnIsFileBeingEncrypted");
    }

    private async Task<HlsPlaylist?> PostVideoToHlsapiAsync(IBrowserFile browserFile)
    {
        CallbackExecutor.ExecuteSubscriptionsByName($"HLS: Uploading a {browserFile.Name}", "OnTitleChange");
        CallbackExecutor.ExecuteSubscriptionsByName(true, "OnShouldRender");
        var formData = new MultipartFormDataContent();

        var progressStreamContent = new ProgressStreamContent(browserFile.OpenReadStream(long.MaxValue), browserFile.Size);
        progressStreamContent.ProgressChanged += (_, currBytes, totalBytes) =>
        {
            var ratio = currBytes / (double)totalBytes;
            var percentage = Math.Round(ratio * 100, 1);
            CallbackExecutor.ExecuteSubscriptionsByName(percentage, "OnVideoUploadProgressChanged");
        };

        formData.Add(progressStreamContent, "payload", browserFile.Name);

        using var httpClient = new HttpClient();
        try
        {
            var hlsApiUrl = string.Join("", NavigationManager.BaseUri, "hlsapi/convert");

            var request = await httpClient.PostAsync(hlsApiUrl, formData);

            if (!request.IsSuccessStatusCode)
                throw new ApplicationException("Could not post video to HLS API");

            var m3U8PlaylistContent = await request.Content.ReadAsStringAsync();

            if (string.IsNullOrWhiteSpace(m3U8PlaylistContent))
                return null;
            
            return new HlsPlaylist
            {
                Name = browserFile.Name,
                M3U8Content = m3U8PlaylistContent,
            };
        }
        catch (Exception e)
        {
            throw new ApplicationException("Could not convert video to HLS", e);
        }
        finally
        {
            CallbackExecutor.ExecuteSubscriptionsByName(false, "OnShouldRender");
        }
    }

    private async Task SendMessage()
    {
        if (string.IsNullOrWhiteSpace(MessageInput) || string.IsNullOrWhiteSpace(TopicName) || string.IsNullOrWhiteSpace(MyUsername))
        {
            MessageInput = string.Empty;
            return;
        }

        if (!string.IsNullOrWhiteSpace(MessageInput))
        {
            await MessageService.SendMessage(new TextMessage
            {
                Sender = MyUsername,
                Target = TopicName,
                Text = MessageInput,
                Index = 0,
                Total = 1
            });
        }

        MessageInput = string.Empty;
        StateHasChanged();
    }

    public async ValueTask DisposeAsync()
    {
        if (JsModule is not null)
        {
            await JsModule.InvokeVoidAsync("RemoveOnPasteEvent");
            await JsModule.DisposeAsync();
        }
    }
}
