@inject IHubServiceSubscriptionManager HubServiceSubscriptionManager
@using Ethachat.Client.Services.HubServices.CommonServices.SubscriptionService
@using Ethachat.Client.UI.Shared.Modal
@implements IDisposable

<CustomModal @ref="_modal"
             Title=@Title
             BodyLines=@( [$"Upload: {UploadProgressPercentage}%"])>
</CustomModal>

@code {
    [Parameter] public string Title { get; set; } = "Uploading a video";

    private CustomModal? _modal = default!;
    private Guid ComponentId { get; set; }
    private bool IsModalShown { get; set; }
    private double UploadProgressPercentage { get; set; } = 0;
    public void Dispose() => HubServiceSubscriptionManager.RemoveComponentCallbacks(ComponentId);

    protected override async Task OnInitializedAsync()
    {
        //This id will be needed on dispose stage
        //On dispose stage we need to clear out all of the component event subscriptions
        ComponentId = Guid.NewGuid();

        HubServiceSubscriptionManager
            .AddCallback<bool>(OnShouldRender, "OnShouldRender", ComponentId);

        HubServiceSubscriptionManager
            .AddCallback<double>(OnVideoUploadProgressChanged, "OnVideoUploadProgressChanged", ComponentId);

        HubServiceSubscriptionManager
            .AddCallback<string>(OnTitleChange, "OnTitleChange", ComponentId);
    }

    private void OnTitleChange(string modalTitle)
    {
        Title = modalTitle;
        StateHasChanged();
    }

    private void OnVideoUploadProgressChanged(double uploadProgressPercentage)
    {
        UploadProgressPercentage = uploadProgressPercentage;
        StateHasChanged();
    }

    private void OnShouldRender(bool shouldRender)
    {
        if (shouldRender)
            _modal?.Show();
        else
            _modal?.Hide();
    }

}