@inject IHubServiceSubscriptionManager HubServiceSubscriptionManager
@using Ethachat.Client.Services.HubServices.CommonServices.SubscriptionService
@implements IDisposable

<CustomModal
    @ref="_modal"
    Title="Uploading"
    BodyLines=@( 
              [
                  $"Encryption progress: {Progress}%", 
                  "You can close this dialog, upload will continue in a background."
              ])/>

@code {
    private CustomModal _modal = default!;
    private decimal Progress { get; set; } = 0;
    private Guid ComponentId { get; set; }
    private bool IsModalShown { get; set; }
    public void Dispose() => HubServiceSubscriptionManager.RemoveComponentCallbacks(ComponentId);

    protected override void OnInitialized()
    {
        base.OnInitialized();
        //This id will be needed on dispose stage
        //On dispose stage we need to clear out all the component event subscriptions
        ComponentId = Guid.NewGuid();

        HubServiceSubscriptionManager
            .AddCallback<bool>(FileIsBeingEncrypted, "OnIsFileBeingEncrypted", ComponentId);

        HubServiceSubscriptionManager
            .AddCallback<decimal>(ChangeProgressPercentage, "OnFileEncryptionProgressChanged", ComponentId);
    }

    private void ChangeProgressPercentage(decimal progress)
    {
        Progress = progress;
        StateHasChanged();
    }

    private void FileIsBeingEncrypted(bool isProcessIsActive)
    {
        if(isProcessIsActive)
            _modal.Show();
        else
            _modal.Hide();
    }

}