@using Limp.Client.UIComponents.InputForms.InputBoxes
@using Limp.Client.UIComponents.InputForms.Registration.Models;
@using Limp.Client.UIComponents.SuccessOrErrorMessage
@using LimpShared.Models.Authentication.Models.AuthenticatedUserRepresentation.Claims;
@using LimpShared.Models.Authentication.Models.UserAuthentication;
@using LimpShared.Models.Authentication.Models;
@using System.Text.RegularExpressions;

<div class="registration-page-content">
    <EditForm Model="@Credentials" OnSubmit="OnRegister">
        <div class="form-content" style="display: @(RegistrationAttemptResult.Result == AuthResultType.Success ? "none" : "unset");">            
            <div class="registration-form-header">
                <span>Create a Limp Messenger Account</span>
            </div>
            <div class="registration-form">
                <InputBox InputText="@Credentials.Username.Value"
                          IconClass="fa-solid fa-user"
                          Placeholder="Username"
                          Label="Username"
                          BindEvent="oninput"                
                          IsRequired="true"
                          OnInput="((value) => Credentials.Username.Value = value)" />

                @if (Credentials.Username.IsTouched)
                {
                    <div style="
                        display: flex;
                        flex-direction: column;
                        gap: 10px;
                        color:red;">

                        @foreach (var errorMessage in Credentials.Username.ErrorMessages)
                        {
                            <span>@errorMessage</span>
                        }
                    </div>
                }

                <InputBox InputText="@Credentials.Password.Value"
                IconClass="fa-solid fa-key"
                Placeholder="Password"
                Label="Password"
                BindEvent="oninput"
                IsRequired="true"
                Type="password"
                OnInput="((value) => Credentials.Password.Value = value)" />

                @if (Credentials.Password.IsTouched)
                {
                    <div style="
                    display: flex;
                    flex-direction: column;
                    gap: 10px;
                    color:red;">

                        @foreach (var errorMessage in Credentials.Password.ErrorMessages)
                        {
                            <span>@errorMessage</span>
                        }
                    </div>
                }

                <InputBox InputText="@Credentials.PasswordConfirmation.Value" 
                    IconClass="fa-solid fa-key"
                    Placeholder="Password confirmation"
                    Label="Password confirmation"
                    BindEvent="oninput"
                    IsRequired="true"
                    Type="password"
                          OnInput="((value) => {Credentials.PasswordConfirmation.Value = value; Credentials.PasswordConfirmation.ValidateAgainst(Credentials.Password);})" />

                @if (Credentials.PasswordConfirmation.IsTouched)
                {
                    <div style="
                    display: flex;
                    flex-direction: column;
                    gap: 10px;
                    color:red;">

                        @foreach (var errorMessage in Credentials.PasswordConfirmation.ErrorMessages)
                        {
                            <span>@errorMessage</span>
                        }
                    </div>
                }

                @if (Credentials.Username.IsValid && Credentials.Password.IsValid && Credentials.PasswordConfirmation.Value == Credentials.Password.Value)
                {
                    <button class="btn btn-secondary btn-lg btn-block">Submit</button>
                }
                else
                {
                    <button class="btn btn-secondary btn-lg btn-block" disabled>Submit</button>
                }
            </div>
        </div>

        <ResultMessagesBlock 
            Result="RegistrationAttemptResult" 
            SuccesLink="login"
            SuccessLinkDescription="To login page"/>
    </EditForm>
</div>

@code {
    [Parameter]
    public Action<UserAuthentication> OnRegisterEvent { get; set; } = ((dto) => throw new ApplicationException
    ($"At {nameof(RegistrationForm)} component please provide a handler for event: {nameof(OnRegisterEvent)}"));

    [Parameter]
    public AuthResult RegistrationAttemptResult { get; set; } = new();

    private RegisterFormModel Credentials = new();

    private void OnRegister()
    {
        UserAuthentication authenticationData = new()
        {
            Username = Credentials.Username.Value,
            Password = Credentials.PasswordConfirmation.Value,
            Claims = new List<UserClaimsDTO>
            {
                new UserClaimsDTO
                {
                    Name = "Name",
                    Value = Credentials.Username.Value,
                }
            }
        };

        OnRegisterEvent(authenticationData);
    }
}
