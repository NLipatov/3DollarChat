@using Ethachat.Client.UI.CommonComponents.InputForms.InputBoxes.Forms.RegistrationForm
@using Ethachat.Client.UI.CommonComponents.InputForms.Registration.Models
@using Ethachat.Client.UI.CommonComponents.SuccessOrErrorMessage
@using EthachatShared.Models.Authentication.Models.AuthenticatedUserRepresentation.Claims;
@using EthachatShared.Models.Authentication.Models.UserAuthentication;
@using EthachatShared.Models.Authentication.Models;
@using Ethachat.Client.UI.AccountManagement.LogicHandlers
@inject ILoginHandler _loginHandler

<div class="registration-page-content">
    <section>
        <div>
            <div>
                <div>
                    <EditForm Model="@Credentials" OnSubmit="OnRegister">
                        <RegisterFormInputBox 
                            CheckedInput="Credentials.Username"
                            Placeholder="Username"
                            BindEvent="oninput"
                            IsRequired="true"
                            OnInput="((value) => Credentials.Username.Value = value)" />

                        @if (IsAuthenticationMethodRequiresPassword)
                        {
                            <RegisterFormInputBox 
                                CheckedInput="Credentials.Password"
                                Placeholder="Password"
                                BindEvent="oninput"
                                IsRequired="true"
                                Type="password"
                                OnInput="((value) => Credentials.Password.Value = value)" />

                            <RegisterFormInputBox 
                                CheckedInput="Credentials.PasswordConfirmation"
                                Placeholder="Password confirmation"
                                BindEvent="oninput"
                                IsRequired="true"
                                Type="password"
                                OnInput="((value) => {Credentials.PasswordConfirmation.Value = value; Credentials.PasswordConfirmation.ValidateAgainst(Credentials.Password);})" />
                        }

                        @if (ValidateForm())
                        {
                            <button class="btn btn-primary btn-lg btn-block">Register</button>
                        }
                        else
                        {
                            <Tooltip Placement="TooltipPlacement.Right" Title="Fill in the form first">
                                <button class="btn btn-secondary btn-lg btn-block" disabled>Register</button>
                            </Tooltip>
                        }

                        <ResultMessagesBlock 
                            Result="RegistrationAttemptResult"
                            SuccesLink="signin"
                            SuccessLinkDescription="To Sing In page" />
                        
                    </EditForm>
                </div>
            </div>
        </div>
    </section>
</div>

@code {
    [Parameter]
    public Action<UserAuthentication> OnRegisterEvent { get; set; } = ((dto) => throw new ApplicationException
    ($"At {nameof(RegistrationForm)} component please provide a handler for event: {nameof(OnRegisterEvent)}"));

    [Parameter]
    public AuthResult RegistrationAttemptResult { get; set; } = new();

    [Parameter]
    public bool IsAuthenticationMethodRequiresPassword { get; set; } = true;

    private RegisterFormModel Credentials = new();

    private void OnRegister()
    {
        UserAuthentication authenticationData = new()
        {
            Username = Credentials.Username.Value,
            Password = Credentials.PasswordConfirmation.Value,
            Claims = new List<UserClaimsDto>
            {
                new UserClaimsDto
                {
                    Name = "Name",
                    Value = Credentials.Username.Value,
                }
            }
        };

        OnRegisterEvent(authenticationData);
    }

    private bool ValidateForm()
    {
        switch (IsAuthenticationMethodRequiresPassword)
        {
            case false:
                return Credentials.Username.IsTouched;
            default: return Credentials.Username.IsValid 
                   && Credentials.Password.IsValid 
                   && Credentials.PasswordConfirmation.Value == Credentials.Password.Value;
        }
    }
}
