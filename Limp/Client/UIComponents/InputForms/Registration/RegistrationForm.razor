@using Limp.Client.UIComponents.InputForms.InputBoxes
@using Limp.Client.UIComponents.InputForms.Registration.Models;
@using Limp.Client.UIComponents.SuccessOrErrorMessage
@using LimpShared.Models.Authentication.Models.AuthenticatedUserRepresentation.Claims;
@using LimpShared.Models.Authentication.Models.UserAuthentication;
@using LimpShared.Models.Authentication.Models;

<div class="registration-page-content">
    <EditForm Model="@Credentials" OnSubmit="OnRegister">
        <div class="form-content" style="display: @(RegistrationAttemptResult.Result == AuthResultType.Success ? "none" : "unset");">            
            <div class="registration-form-header">
                <span>Create a Limp Messenger Account</span>
            </div>
            <div class="registration-form">
                <InputBox InputText="@Credentials.Username"
                          IconClass="fa-solid fa-user"
                          Placeholder="Username"
                          BindEvent="oninput"                
                          IsRequired="true"
                          OnInput="((value) => Credentials.Username = value)"/>

                <InputBox InputText="@Credentials.Password"
                          IconClass="fa-solid fa-key"
                          Placeholder="Password"
                          BindEvent="oninput"                
                          IsRequired="true"
                          Type="password"
                          OnInput="((value) => Credentials.Password = value)" />

                <InputBox InputText="@Credentials.PasswordConfirmation" 
                    IconClass="fa-solid fa-key" 
                    Placeholder="Password confirmation" 
                    BindEvent="oninput"
                    IsRequired="true"
                    Type="password"
                    OnInput="((value) => Credentials.PasswordConfirmation = value)" />

                <button class="submit-button">Submit</button>
            </div>
        </div>

        <ResultMessagesBlock
            Result="RegistrationAttemptResult"/>

        <div class="validation-results">
                <DataAnnotationsValidator />
            <ValidationSummary style="
            display: flex;
            flex-direction: column;
            gap: 10px;" />
            </div>
    </EditForm>
</div>

@code {
    [Parameter]
    public Action<UserAuthentication> OnRegisterEvent { get; set; } = ((dto) => throw new ApplicationException
    ($"At {nameof(RegistrationForm)} component please provide a handler for event: {nameof(OnRegisterEvent)}"));

    [Parameter]
    public AuthResult RegistrationAttemptResult { get; set; } = new();

    private RegisterFormModel Credentials = new();

    private bool IsPasswordSameAsConfirmation()
    {
        if (Credentials.Password != Credentials.PasswordConfirmation)
        {
            RegistrationAttemptResult = new AuthResult
            {
                Result = AuthResultType.Fail,
                Message = "Password does not match Password Confirmation!"
            };

            return false;
        }

        return true;
    }

    private void OnRegister()
    {
        if(!IsPasswordSameAsConfirmation())
        {
            return;
        }

        UserAuthentication authenticationData = new()
        {
            Username = Credentials.Username,
            Password = Credentials.PasswordConfirmation,
            Claims = new List<UserClaimsDTO>
            {
                new UserClaimsDTO
                {
                    Name = "Name",
                    Value = Credentials.Username,
                }
            }
        };

        OnRegisterEvent(authenticationData);
    }
}
