@using ClientServerCommon.Models.Message;
@using Limp.Client.Services.HubServices.CommonServices.SubscriptionService;
@using Limp.Client.Services.InboxService;
@inject IMessageBox _messageBox
@inject IHubServiceSubscriptionManager _hubServiceSubscriptionManager

<div class="messages-box">
    @foreach (var message in Messages.Where(x => x.Type == MessageType.UserMessage))
    {
        bool isOutcoming = message.Sender == "You";
        string messageClass = isOutcoming ? "outcoming" : "incoming";

        <div class="message @messageClass">
            <div class="message-text">
                <span>@(message.Payload)</span>
            </div>
            <div class="timestamp">
                <span>@message.DateSent.ToString("hh:mm")</span>
                @if(message.Sender == "You")
                {
                    @if(message.IsRead)
                    {
                        <i class="fas fa-check-double @messageClass"></i>
                    }
                    else if(message.IsReceived)
                    {
                        <i class="fas fa-check @messageClass"></i>
                    }
                }
            </div>
        </div>
    }
</div>

@code {
    [Parameter]
    public string topicName { get; set; } = string.Empty;
    private List<Message> Messages { get; set; } = new();
    private Guid ComponentId { get; set; }

    public void Dispose() => _hubServiceSubscriptionManager.RemoveComponentCallbacks(ComponentId);
    protected override async Task OnInitializedAsync()
    {
        Messages = GetPreviousMessages();

        SubscribeToHubEvents();
    }

    private void SubscribeToHubEvents()
    {
        _hubServiceSubscriptionManager.AddCallback<Guid>(MarkAsReceived, "MessageWasReceivedByRecepient", ComponentId);
        _hubServiceSubscriptionManager.AddCallback<Message>(AddMessage, "IncomingMessageReceived", ComponentId);
    }

    private List<Message> GetPreviousMessages()
    {
        //This id will be needed on dispose stage
        //On dispose stage we need to clear out all of the component event subscriptions
        ComponentId = Guid.NewGuid();

        if (string.IsNullOrWhiteSpace(topicName))
        {
            throw new ApplicationException("Chat topic name was not resolved, could not messages from this topic.");
        }

        List<Message> messagesFromMessageBox = _messageBox.FetchMessagesFromMessageBox(topicName);
        return messagesFromMessageBox;
    }

    public void MarkAsReceived(Guid messageId)
    {
        Message? receivedMessage = Messages
        .Where(x=>x.Sender == "You")
        .FirstOrDefault(x => x.Id == messageId);

        if (receivedMessage != null)
        {
            receivedMessage.IsReceived = true;
            StateHasChanged();
        }
    }

    public void AddMessage(Message message)
    {
        Messages.Add(message);
        StateHasChanged();
    }
}
