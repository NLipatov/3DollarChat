@using Ethachat.Client.UI.CommonComponents.InputForms.InputBoxes
@using Ethachat.Client.UI.CommonComponents.InputForms.Login.Models
@using EthachatShared.Models.Authentication.Models;
@using EthachatShared.Models.Authentication.Models.UserAuthentication;
@inject NavigationManager _navigationManager

@if (LoginAttemptResult.Result != AuthResultType.Success)
{
    <section>
        <div class="container">
            <div>
                <div>
                    @if (LoginAttemptResult.Result != null && !string.IsNullOrWhiteSpace(LoginAttemptResult.Message) && LoginAttemptResult.Result != AuthResultType.Success)
                    {
                        <p class="text-danger fw-bold fs-5">
                            @LoginAttemptResult.Message</p>
                    }
                    <EditForm Model="@LoginFormModel" OnSubmit="OnLogin">
                        <!-- Username input -->
                        <InputBox InputText="@LoginFormModel.Username"
                              BindEvent="oninput"
                              IsRequired="true"
                              OnInput="((value) => LoginFormModel.Username = value)" />

                        @if (!ViaWebAuthn)
                        {
                            <InputBox InputText="@LoginFormModel.Password"
                                      BindEvent="oninput"
                                      IsRequired="true"
                                      Type="password"
                                      OnInput="((value) => LoginFormModel.Password = value)" />
                        }

                        <!-- Submit button -->
                        <button type="submit" class="btn btn-primary btn-lg btn-block">Sign in</button>

                        <div class="validation-results">
                            <DataAnnotationsValidator />
                            <ValidationSummary class="d-flex flex-column gap-2" />
                        </div>

                    </EditForm>
                </div>
            </div>
        </div>
    </section>
}
else
{
    <div class="d-flex flex-column align-items-center font-weight-bold text-center" 
    style="max-width: 50%; 
        height: 100dvh; 
        justify-content: center; 
        margin: 0 auto;">
        <img src="assets/svg/sKd.svg" class="img-fluid">
        <p>You're logged in!</p>
    </div>
}

@code {
    [Parameter]
    public Func<UserAuthentication, Task> OnLoginEvent { get; set; } = ((dto) => throw new ApplicationException
    ($"At {nameof(LoginFormModel)} component please provide a handler for event: {nameof(OnLogin)}"));

    [Parameter]
    public AuthResult LoginAttemptResult { get; set; } = new();

    [Parameter]
    public bool ViaWebAuthn { get; set; } = false;

    private LoginFormModel LoginFormModel = new();

    private void OnLogin()
    {
        UserAuthentication authenticationData = new()
            {
                Username = LoginFormModel.Username,
                Password = LoginFormModel.Password,
            };

        OnLoginEvent(authenticationData);
    }
}
