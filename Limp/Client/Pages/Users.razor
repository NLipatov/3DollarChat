@page "/users"
@using Limp.Client.HubInteraction;
@using Limp.Shared.Models.Login;
@using Limp.Client.Utilities;
@using LimpShared.Authentification;
@using Microsoft.AspNetCore.SignalR.Client;
@inject NavigationManager Navigation
@using Limp.Shared.Models;
@inject IJSRuntime jS
@implements IAsyncDisposable

<PageTitle>Users Online</PageTitle>

<div style="display: flex; flex-direction: column; gap: 10px;">
    @foreach (var connection in userConnections.Where(x=>!x.ConnectionIds.Contains(myConnectionId) && x.ConnectionIds.Count > 0))
    {
        <div style="    
            display: flex;
            align-items: center;
            gap: 10px;
            padding: 10px;
            border: 1px solid;
            height: 5vh;">
            <span>@connection.Username is looking for a chat!</span>
            <button @onclick="()=>RedirectToChat(connection.Username)">Start a chat</button>
        </div>
    }
</div>

@code {
    private List<UserConnections> userConnections { get; set; } = new();
    private string myConnectionId { get; set; } = string.Empty;
    private string? accessToken { get; set; }
    private string? refreshToken { get; set; }
    private HubInteractor? _hubInteractor;

    private async Task RedirectToChat(string username)
    {
        Navigation.NavigateTo($"/user/{username}");
    }

    protected override async Task OnInitializedAsync()
    {
        _hubInteractor = new HubInteractor(Navigation);

        accessToken = await jS.InvokeAsync<string?>("localStorage.getItem", "access-token");
        refreshToken = await jS.InvokeAsync<string>("localStorage.getItem", "refresh-token");

        if (String.IsNullOrWhiteSpace(accessToken))
        {
            Navigation.NavigateTo("login");
            return;
        }

        await _hubInteractor.ConnectToAuthHubAsync(accessToken, refreshToken, OnTokensRefreshAsync);

        await _hubInteractor.ConnectToUsersHubAsync(accessToken, onConnectionIdReceive, onOnlineUsersReceive, OnUsernameResolved);

    }

    private async Task OnUsernameResolved(string username)
    {
        if(_hubInteractor != null)
        {
            await _hubInteractor.ConnectToMessageDispatcherHubAsync(accessToken);
        }
    }

    private async Task OnTokensRefreshAsync(LogInResult result)
    {
        JWTPair? pair = result.JWTPair;
        if (pair == null || String.IsNullOrWhiteSpace(pair.AccessToken) || String.IsNullOrWhiteSpace(pair.RefreshToken.Token))
            Navigation.NavigateTo("/login");

        if (result.Result == LogInStatus.Success)
        {
            await jS.InvokeVoidAsync("localStorage.setItem", "access-token", pair!.AccessToken);
            await jS.InvokeVoidAsync("localStorage.setItem", "refresh-token", pair!.RefreshToken.Token);
        }
    }

    private void onConnectionIdReceive(string connectionId)
    {
        myConnectionId = connectionId;
        StateHasChanged();
    }

    private void onOnlineUsersReceive(List<UserConnections> usersConnectedData)
    {
        userConnections = usersConnectedData;
        StateHasChanged();
    }

    private async Task<string> GetStoredAccessTokenAsync()
    {
        return await jS.InvokeAsync<string>("localStorage.getItem", "access-token");
    }

    public async ValueTask DisposeAsync()
    {
        if (_hubInteractor != null)
        {
            await _hubInteractor.DisposeAsync();
        }
    }
}
