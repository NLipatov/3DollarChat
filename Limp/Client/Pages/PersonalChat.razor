@page "/user/{partnerName?}"
@using Limp.Client.Utilities;
@using Limp.Shared.Models;
@using Microsoft.AspNetCore.SignalR.Client;
@inject NavigationManager Navigation
@inject IJSRuntime jS;

<PageTitle>Chat with @partnerName</PageTitle>

<h1>Your chat with @partnerName</h1>

<div>
    <label>You:</label>
    <input @bind="messageInput"/>
    <button @onclick="Dispatch" disabled="@(!IsConnected)">Send</button>
</div>

@foreach (var message in messages)
{
    <div>
        <span>@message.SenderUsername:</span><span>@message.Payload</span>
    </div>
}

@code {
    [Parameter]
    public string? partnerName { get; set; }
    [Parameter]
    public string? myName { get; set; }
    private HubConnection? hubConnection;
    private List<Message> messages { get; set; } = new();
    private string messageInput = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
        .WithUrl(Navigation.ToAbsoluteUri("/messageDispatcherHub"))
        .Build();

        hubConnection.On<Message>("ReceiveMessage", message =>
        {
            messages.Add(message);
            StateHasChanged();
        });

        hubConnection.On<string>("OnMyNameResolve", value =>
        {
            myName = value;
        });

        await hubConnection.StartAsync();

        await hubConnection.SendAsync("SetUsername", await jS.InvokeAsync<string>("localStorage.getItem", "access-token"));
    }

    public bool IsConnected =>
        hubConnection?.State == HubConnectionState.Connected;

    private async Task Dispatch()
    {
        Message messageToSend = new Message
        {
            Payload = messageInput,
            DateSent = DateTime.UtcNow,
                TargetGroup = partnerName!,
                SenderUsername = myName!,
        };

        await hubConnection.SendAsync("Dispatch", messageToSend);

        messageInput = string.Empty;

        messageToSend.SenderUsername = "You";

        messages.Add(messageToSend);
    }
}
