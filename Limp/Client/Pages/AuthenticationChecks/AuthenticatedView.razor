@using Limp.Client.HubInteraction.Handlers.Helpers;
@using Limp.Client.Pages.AuthenticationChecks.Stages;
@using Limp.Client.Services;
@using Limp.Client.Services.HubConnectionProvider.Implementation;
@using Limp.Client.Services.HubConnectionProvider;
@using Limp.Client.Services.HubService.AuthService;
@inject IJSRuntime _jS
@inject IConfiguration _configuration
@inject NavigationManager _navigationManager
@inject IAuthService _authService
@inject IHubConnectionProvider _hubConnectionProvider

@if (isConnectedToAuthHub)
{
    if(_authenticationState == AuthenticationState.TokenActualisation)
    {
        <div class="d-flex flex-column align-items-center text-center">
            <p class="mt-3 mb-0">Checking if you have been authenticated</p>
        </div>
    }
    else
    {
        if (_authenticationState == AuthenticationState.Authenticated)
        {
            @AuthenticatedContent
        }
        else
        {
            @UnauthenticatedContent
        }
    }
}
else
{
    <div class="d-flex flex-column align-items-center text-center">
        <img class="img-fluid" style="max-height: 50vh;" src="https://svgur.com/i/ssH.svg" alt="Server technician adjusting wiring" />
        <p class="mt-3 mb-0">Looks like you're not connected to our server</p>
        <p class="mb-3">We're trying to establish a connection with you once again</p>
    </div>
}



@code {
    [Parameter] 
    public RenderFragment? AuthenticatedContent { get; set; }
    [Parameter] 
    public RenderFragment? UnauthenticatedContent { get; set; }
    private AuthenticationState _authenticationState { get; set; } = AuthenticationState.TokenActualisation;
    private bool isConnectedToAuthHub => _authService.IsConnected();

    protected override async Task OnInitializedAsync()
    {
        await IsUserAuthenticated();
    }

    private async Task IsUserAuthenticated()
    {
        if (isConnectedToAuthHub)
        {
            //If the access token has expired, we will try to update it
            await _authService.RefreshTokenIfNeededAsync(RefreshTokenAttemptResult);
        }
        else
        {
            await ReconnectToHubsAsync();
            await IsUserAuthenticated();
        }
    }

    private async Task RefreshTokenAttemptResult(bool isSuccessfullyRefreshed)
    {
        //If the refresh token is invalid, the user must log in again
        if (!isSuccessfullyRefreshed)
            _authenticationState = AuthenticationState.NotAuthenticated;

        //Else - checking if actualised access token is valid
        await _authService.ValidateTokenAsync(DecideOnToken);
    }

    private async Task DecideOnToken(bool isAccessTokenValid)
    {
        if(isAccessTokenValid)
            _authenticationState = AuthenticationState.Authenticated;
        else
            _authenticationState = AuthenticationState.NotAuthenticated;

        await ReconnectToHubsAsync();
        StateHasChanged();
    }

    private async Task ReconnectToHubsAsync()
    {
        await _hubConnectionProvider.DisposeAsync();
        await _hubConnectionProvider.ConnectToHubs();
    }
}
