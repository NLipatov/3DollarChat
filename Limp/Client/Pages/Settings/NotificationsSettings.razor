@page "/settings/notifications"
@using Limp.Client.HubInteraction.Handlers.Helpers;
@using Limp.Client.Pages.AuthenticationChecks
@using Limp.Client.Services.HubService.UsersService;
@using Limp.Client.Services.HubServices.CommonServices.SubscriptionService;
@using Limp.Client.Services.LocalStorageService;
@using Limp.Client.Services.NotificationService;
@using Limp.Client.Shared.ReuseableComponents.EditableList
@using LimpShared.Models.WebPushNotification;
@inject IHubServiceSubscriptionManager _hubServiceSubscriptionManager
@inject NavigationManager _navigationManager
@inject IJSRuntime _jS
@inject IUsersService _usersService
@inject IWebPushService _webPushService
@inject ILocalStorageService _localStorageService
@implements IDisposable

<AuthenticatedView>
    <AuthenticatedContent>
        <div class="p-2" style="    display: flex;
    flex-direction: column;
    gap: 10px;">

            <EditableList 
                ListHeader="Active web push subscription"
                itemCollection="(webPushSubscriptions.Select(x=> new ItemModel {ItemName = x.Id.ToString(), IsActive = x.UserAgentId == userAgentWebPushNotificationId}).ToList())"
                OnItemRemoved="OnRemoveSubscriptions"
                IconClass="bi bi-display" />

            <Modal @ref="modal" Title="Current browser notifications subscriptions deleted">
                <BodyTemplate>
                    You have removed your current browser web push subscriptions. Please also reset your browser notification permissions.
                </BodyTemplate>
                <FooterTemplate>
                    <Button Color="ButtonColor.Success" @onclick="(() => ToggleSuggestResetPermissionsModal(false))">Ok</Button>
                </FooterTemplate>
            </Modal>
        </div>
    </AuthenticatedContent>
    <UnauthenticatedContent>
        <UnAuthorized />
    </UnauthenticatedContent>
</AuthenticatedView>

@code {
    private Modal modal = default!;
    private Guid ComponentId { get; set; }
    private NotificationSubscriptionDTO[] webPushSubscriptions { get; set; } = new NotificationSubscriptionDTO[0];
    private bool subscriptionsWasLoaded { get; set; } = false;
    private Guid userAgentWebPushNotificationId { get; set; }


    public void Dispose() => _hubServiceSubscriptionManager.RemoveComponentCallbacks(ComponentId);

    protected override async Task OnInitializedAsync()
    {
        userAgentWebPushNotificationId = await _localStorageService.GetUserAgentIdAsync();

        string? accesToken = await JWTHelper.GetAccessTokenAsync(_jS);

        //Shortcut for cases when user was not yet authenticated
        if (string.IsNullOrWhiteSpace(accesToken))
            return;

        //This id will be needed on dispose stage
        //On dispose stage we need to clear out all of the component event subscriptions
        ComponentId = Guid.NewGuid();

        //Subscribing to server event of updating online users
        _hubServiceSubscriptionManager
            .AddCallback<NotificationSubscriptionDTO[]>(OnSubscriptionsLoaded, "ReceiveWebPushSubscriptions", ComponentId);

        _hubServiceSubscriptionManager
            .AddCallback<NotificationSubscriptionDTO[]>(OnRemoveSubsriptionsProcessedByHub, "RemovedFromWebPushSubscriptions", ComponentId);

        _hubServiceSubscriptionManager
            .AddCallback(LoadWebPushSubscriptions, "WebPushSubscriptionSetChanged", ComponentId);

        //if hub connection is not setted up already, we will set it up now
        await _usersService.ConnectAsync();

        await _usersService.GetUserWebPushSubscriptions(accesToken);
    }

    private void OnSubscriptionsLoaded(NotificationSubscriptionDTO[] subscriptions)
    {
        webPushSubscriptions = subscriptions;
        subscriptionsWasLoaded = true;

        StateHasChanged();
    }

    private async Task ToggleSuggestResetPermissionsModal(bool modalShoulBeDisplayed = true)
    {
        if (!modalShoulBeDisplayed)
            await modal.HideAsync();
        else
            await modal.ShowAsync();
    }

    private async Task OnRemoveSubscriptions(string? subscriptionIdString = null)
    {
        if(!string.IsNullOrWhiteSpace(subscriptionIdString))
        {
            if (!Guid.TryParse(subscriptionIdString, out Guid subscriptionId))
                throw new ArgumentException($"Could not parse {typeof(Guid).Name} from given string: '{subscriptionIdString}'.");

            var subscriptionToDelete = webPushSubscriptions.FirstOrDefault(x => x.Id == subscriptionId);
            if (subscriptionToDelete is null)
                throw new ArgumentException
                ($"Error on web push subscription deletion:" + 
                "there is no web push subscription with id '{subscriptionIdToDelete}' found.");
            else
            {
                subscriptionToDelete.AccessToken = await JWTHelper.GetAccessTokenAsync(_jS);
                await RemoveWebPushSubscriptions(new NotificationSubscriptionDTO[1] { subscriptionToDelete });
            }
        }
        else
        {
            if (webPushSubscriptions.Any())
                webPushSubscriptions.First().AccessToken = await JWTHelper.GetAccessTokenAsync(_jS);

            await RemoveWebPushSubscriptions(webPushSubscriptions);
        }
    }

    private async Task RemoveWebPushSubscriptions(NotificationSubscriptionDTO[] subscriptionsToRemove)
    {
        if (subscriptionsToRemove.Any(x => x.UserAgentId == userAgentWebPushNotificationId))
        {
            await ToggleSuggestResetPermissionsModal();
        }

        await _usersService.RemoveUserWebPushSubscriptions(subscriptionsToRemove);
    }

    private async Task OnRemoveSubsriptionsProcessedByHub(NotificationSubscriptionDTO[] notificationSubscriptionDTOs)
    {
        //If there are no more web push subscriptions left, 
        // enable requesting such permission again for this user agent
        if (webPushSubscriptions.Length - notificationSubscriptionDTOs.Length == 0)
            await _webPushService.ResetWebPushPermission();

        webPushSubscriptions = webPushSubscriptions
        .Where(x => !notificationSubscriptionDTOs.Any(s => s.Id == x.Id))
        .ToArray();

        StateHasChanged();
    }

    private async Task LoadWebPushSubscriptions()
    {
        string? accessToken = await JWTHelper.GetAccessTokenAsync(_jS);
        if (string.IsNullOrWhiteSpace(accessToken))
            throw new ArgumentException
            ("Could not get a access token from local storage to load web push subscriptions.");

        await _usersService.GetUserWebPushSubscriptions(accessToken);
    }
}
