@page "/user/{topicName?}"
@using ClientServerCommon.Models;
@using ClientServerCommon.Models.Message;
@using Limp.Client.Cryptography.CryptoHandlers.Handlers;
@using Limp.Client.Cryptography.KeyStorage;
@using Limp.Client.HubInteraction.Handlers;
@using Limp.Client.HubInteraction;
@using Limp.Client.HubInteraction.Handlers.Helpers;
@using Limp.Client.Pages.PersonalChat.Logic.TokenRelatedOperations;
@using Limp.Client.Pages.PersonalChat.UI.Childs.ChatHeader
@using Limp.Client.Services.CloudKeyService;
@using Limp.Client.Services.CloudKeyService.Models;
@using Limp.Client.Services.HubServices.CommonServices.SubscriptionService;
@using Limp.Client.Services.HubServices.MessageService;
@using Limp.Client.Services;
@using Microsoft.AspNetCore.SignalR.Client;
@using Limp.Client.Cryptography;
@using Limp.Client.HubInteraction.Handlers.MessageDecryption;
@using Limp.Client.HubInteraction.Handlers.MessageDispatcherHub.AESOfferHandling;
@using LimpShared.Encryption;
@using Limp.Client.Pages;
@using Limp.Client.Services.InboxService;
@using Limp.Client.Pages.PersonalChat.Logic.MessageBuilder;
@using Limp.Client.Pages.PersonalChat.UI.Childs.MessageCollectionDispaying;
@using Limp.Client.Pages.AuthenticationChecks
@inject NavigationManager _navigationManager
@inject IJSRuntime _jS
@inject ICryptographyService _cryptographyService
@inject IMessageDecryptor _messageDecryptor
@inject IMessageBox _messageBox
@inject IAESOfferHandler _aesOfferHandler
@inject IMessageService _messageService
@inject IHubServiceSubscriptionManager _hubServiceSubscriptionManager
@inject IMessageBuilder _messageBuilder
@inject ILocalKeyManager _localKeyManager
@implements IDisposable

<PageTitle>Chat with @topicName</PageTitle>

<AuthenticatedView>
    <AuthenticatedContent>
        <div class="page-container">
            <KeyBeingTransfered IsDisplayed="!AESKeyForConversationExists" />

            <ChatHeader 
                IsOnline=true
                Name=@topicName/>

            <MessageList @ref=MessageListComponent
                        topicName=@topicName />

            <Limp.Client.Pages.PersonalChat.UI.Childs.MessageInput.MessageInputBox 
                myUsername=@myUsername
                topicName=@topicName/>
        </div>
    </AuthenticatedContent>
    <UnauthenticatedContent>
        <UnAuthorized/>
    </UnauthenticatedContent>
</AuthenticatedView>

@code {
    [Parameter]
    public string topicName { get; set; } = string.Empty;
    [Parameter]
    public string myUsername { get; set; } = string.Empty;
    private List<UserConnection> userConnections { get; set; } = new();
    private bool AESKeyForConversationExists => GetAESKey() != null;
    private Guid ComponentId { get; set; }
    private MessageList? MessageListComponent { get; set; } = new();

    public void Dispose() => _hubServiceSubscriptionManager.RemoveComponentCallbacks(ComponentId);

    protected override async Task OnInitializedAsync()
    {
        //This id will be needed on dispose stage
        //On dispose stage we need to clear out all of the component event subscriptions
        ComponentId = Guid.NewGuid();

        myUsername = await TokenOperations.ResolveMyUsername(_jS);

        //If username was not read, ask user to relogin
        if (string.IsNullOrWhiteSpace(myUsername))
        {
            _navigationManager.NavigateTo("/login");
            return;
        }

        SubscribeToHubEvents();

        await GetAESKeyAsync();
    }

    private void SubscribeToHubEvents()
    {
        _hubServiceSubscriptionManager.AddCallback<string>(OnAESKeyReady, "OnPartnerAESKeyReady", ComponentId);
    }

    private async Task GetAESKeyAsync()
    {
        Key? key = await GetAESKey();
        if(key != null)
        {
            return;
        }

        await _messageService.RequestForPartnerPublicKey(topicName);
    }

    private async Task<Key?> GetAESKey()
    {
        LocalKeyChain? lkc = (await _localKeyManager.ReadLocalKeyChainAsync());
        Key? lkcKey = lkc?.AESKeyStorage.FirstOrDefault(x => x.Key == topicName).Value;

        Key? keyFromInMemoryService = InMemoryKeyStorage.AESKeyStorage.FirstOrDefault(x => x.Key == topicName).Value;

        if (keyFromInMemoryService == null && lkcKey != null)
        {
            InMemoryKeyStorage.AESKeyStorage.Add(topicName, lkcKey);
            keyFromInMemoryService = InMemoryKeyStorage.AESKeyStorage.FirstOrDefault(x => x.Key == topicName).Value;
        }

        if(keyFromInMemoryService != null)
        {
            Console.WriteLine($"Using key created at: {keyFromInMemoryService.CreationDate.ToString("M hh:mm")}");
        }
        else
        {
            Console.WriteLine("No key found");
        }

        return keyFromInMemoryService;
    }

    public async Task OnAESKeyReady(string partnerName)
    {
        Key key = await GetAESKey()!;
        await _localKeyManager.SynchronizeWithInMemoryKeyStorageAsync();
        StateHasChanged();
    }

    private async Task RenewAESKey()
    {
        await _messageService.RequestForPartnerPublicKey(topicName);
    }
}
