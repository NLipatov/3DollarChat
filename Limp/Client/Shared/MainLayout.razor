@using Limp.Client.Cryptography;
@using Limp.Client.Cryptography.KeyStorage;
@using Limp.Client.HubInteraction.Handlers.Helpers;
@using Limp.Client.Services.HubConnectionProvider;
@using Limp.Client.Services.HubService.UsersService;
@using Limp.Client.Shared.ChildComponents
@using LimpShared.Encryption;
@using LimpShared.Models.WebPushNotification;
@inherits LayoutComponentBase
@inject ICryptographyService _cryptographyService
@inject IHubConnectionProvider _hubConnectionProvider
@inject IJSRuntime _jSRuntime
@inject IUsersService _usersService

@if (!isRSAGenerated)
{
    <div class="RSACalculatingWarning">
        <p>
            Calculating an RSA key pair...
        </p>
    </div>
}
else if(!isConnectedToHubs)
{
    <div class="RSACalculatingWarning">
        <p>
            Connecting to application server
        </p>
    </div>
}
else
{
    <div class="ApplicationContent">
        <SidebarMenu />
        <div style="width: 100%;">
            @Body
        </div>
    </div>
}

@code{
    private bool isRSAGenerated = false;
    private bool isConnectedToHubs = false;

    protected override async Task OnInitializedAsync()
    {
        await _cryptographyService.GenerateRSAKeyPairAsync();
        KeysGeneratedHandler.SubscribeToRSAKeysGeneratedEvent(() =>
        {
            isRSAGenerated = true;
            StateHasChanged();
            _hubConnectionProvider.ConnectToHubs();
            isConnectedToHubs = true;
        });

        if (!(await IsPushPermissionGranted()))
            await RequestPushPermission();
    }

    private async Task<bool> IsPushPermissionGranted() 
        => await _jSRuntime.InvokeAsync<string>("eval", "Notification.permission") == "granted";

    private async Task RequestPushPermission()
    {
        string? accessToken = await JWTHelper.GetAccessTokenAsync(_jSRuntime);
        if (string.IsNullOrWhiteSpace(accessToken))
            throw new ApplicationException
            ("Could not subscribe to web push notifications because access token was empty string. Relogin needed.");

        NotificationSubscriptionDTO? subscription = 
            await _jSRuntime.InvokeAsync<NotificationSubscriptionDTO>("blazorPushNotifications.requestSubscription");

        if (subscription != null)
        {
            try
            {
                subscription.AccessToken = accessToken;
                await _usersService.SubscribeToWebPushAsync(subscription);
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message);
            }
        }
    }
}