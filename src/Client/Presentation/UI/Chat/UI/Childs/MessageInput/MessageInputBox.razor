@using Ethachat.Client.Services.Authentication.Handlers
@using Ethachat.Client.Services.HubServices.CommonServices.CallbackExecutor
@using Ethachat.Client.Services.HubServices.HubServices.Implementations.MessageService;
@using Ethachat.Client.Services.HubServices.HubServices.Implementations.MessageService.Implementation.Handlers.BinaryReceiving
@using Ethachat.Client.Services.HubServices.HubServices.Implementations.MessageService.Implementation.Handlers.BinarySending
@using Ethachat.Client.Services.InboxService
@using Ethachat.Client.Services.VideoStreamingService
@using Ethachat.Client.UI.Chat.UI.Childs.MessageInput.Logic.MessageSenders.BrowserFile
@using Ethachat.Client.UI.Chat.UI.Childs.MessageInput.Logic.MessageSenders.Text
@using Ethachat.Client.UI.Chat.UI.Childs.MessageInput.Modals
@using Ethachat.Client.UI.Chat.UI.Childs.MessageInput.Models
@using global::Client.Application.Cryptography
@using global::Client.Application.Cryptography.KeyStorage
@using global::Client.Transfer.Domain.Entities.Events
@inject IMessageService MessageService
@inject IMessageBox MessageBox
@inject IJSRuntime JsRuntime
@inject ICallbackExecutor CallbackExecutor
@inject ICryptographyService CryptographyService
@inject IBinaryReceivingManager BinaryReceivingManager
@inject IHlsStreamingService HlsStreamingService
@inject NavigationManager NavigationManager
@inject IKeyStorage KeyStorage
@inject IBinarySendingManager BinarySendingManager
@inject IAuthenticationHandler AuthenticationHandler
@inject ITextMessageSender TextMessageSender
@inject IBrowserFileSender BrowserFileSender
@implements IAsyncDisposable

<div class="message-input-box">
    <input type="text" class="message-input" placeholder="Send a message..."
           value="@MessageInput" @oninput="UpdateMessageInput" @onkeydown="HandleKeyDown"/>

    <label for="fileinput" class="label-wrapper">
        <span>
            <i class="fas fa-paperclip paperclip-icon"></i>
        </span>
        <InputFile id="fileinput" 
            @key="_fileInputId" 
            OnChange=@(async e => await BrowserFileSender.SendIBrowserFile(e.File, _topicName)) 
            style="display: none;"/>
    </label>

    <button class="send-button" @onclick="SendMessage">Send</button>
</div>

<CustomModal
    @ref="TooLargeFileModal"
    Title=@($"Maximum file size is {Math.Floor((decimal)MaxFileSizeBytes / 1024000)} MB.")
    Buttons=@( [new CustomButton { Title = "Close", ButtonType = ButtonType.Secondary, OnPress = (TooLargeFileModal is not null ? TooLargeFileModal.Hide : () => { }) }])>
</CustomModal>

<FileEncryptionModal/>
<HlsConvertationModal/>

@code {
    [Parameter] public string MyUsername { get; set; } = string.Empty;
    [Parameter] public string TopicName { get; set; } = string.Empty;
    private static string _topicName = string.Empty;

    private CustomModal? TooLargeFileModal { get; set; }

    private string MessageInput { get; set; } = string.Empty;
    private Guid _fileInputId = Guid.NewGuid();
    private const long MaxFileSizeBytes = long.MaxValue;
    private static Func<IBrowserFile, string, Task>? SendIBrowserFileDelegate { get; set; } = default;
    private IJSObjectReference? JsModule { get; set; }
    private DateTime LastTypingEventSentOn { get; set; } = DateTime.MinValue;

    [JSInvokable]
    public static async Task FileFromClipboard(byte[] content, string name, string contentType)
    {
        if (SendIBrowserFileDelegate is not null)
        {
            var browserFile = new ClipboardFile(content, name, contentType);
            await SendIBrowserFileDelegate(browserFile, _topicName);
        }
    }

    protected override async Task OnInitializedAsync()
    {
        _topicName = TopicName;
        if (JsModule is null)
        {
            var path = "./js/Clipboard/ClipboardInteractor.js";
            JsModule = await JsRuntime.InvokeAsync<IJSObjectReference>("import", path);
        }
            
        SendIBrowserFileDelegate = BrowserFileSender.SendIBrowserFile;
        await JsModule.InvokeVoidAsync("AddOnPasteEvent");
        
        await base.OnInitializedAsync();
    }

    private void UpdateMessageInput(ChangeEventArgs e)
    {
        MessageInput = e.Value?.ToString() ?? string.Empty;
    }

    private async Task HandleKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await SendMessage();
        }
        else
        {
            // Debounce
            if ((DateTime.UtcNow - LastTypingEventSentOn).TotalMilliseconds > 1500)
            {
                _ = Task.Run(async () => await MessageService.TransferAsync(new EventMessage { Sender = MyUsername, Target = _topicName, Type = EventType.OnTyping }));
                LastTypingEventSentOn = DateTime.UtcNow;
            }
        }
    }

    private async Task SendMessage()
    {
        await TextMessageSender.SendTextMessageAsync(MessageInput, _topicName);

        MessageInput = string.Empty;
        StateHasChanged();
    }

    public async ValueTask DisposeAsync()
    {
        if (JsModule is not null)
        {
            await JsModule.InvokeVoidAsync("RemoveOnPasteEvent");
            await JsModule.DisposeAsync();
        }
    }

}