@using ClientServerCommon.Models.Message;
@using Limp.Client.Pages.PersonalChat.Logic.MessageBuilder;
@using Limp.Client.Services.HubServices.MessageService;
@using Limp.Client.Services.InboxService;
@inject IMessageBuilder _messageBuilder
@inject IMessageService _messageService
@inject IMessageBox _messageBox

<div class="message-input-box" @onkeydown="((e)=> HandleKeyDown(e))">
    <input @bind="messageInput" @bind:event="oninput" />
    <button disabled="@(!_messageService.IsConnected())" @onclick="async () => await SendMessage()">Send</button>
</div>

@code {
    [Parameter]
    public string topicName { get; set; } = string.Empty;
    [Parameter]
    public string myUsername { get; set; } = string.Empty;
    private string messageInput { get; set; } = string.Empty;

    private async Task HandleKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await SendMessage();
        }
    }

    private async Task SendMessage()
    {
        if (!AreTopicNameAndUsernameValid())
        {
            throw new ApplicationException
            ($"{this.GetType().Name} has wrong {nameof(topicName)} and {nameof(myUsername)} parameters value.");
        }
        if (string.IsNullOrWhiteSpace(messageInput))
            return;

        Message messageToSend = await _messageBuilder.BuildMessageToBeSend(messageInput, topicName, myUsername);

        await _messageService.SendMessage(messageToSend);

        messageToSend.Payload = messageInput;
        messageToSend.Sender = "You";
        await _messageBox.AddMessageAsync(messageToSend, isEncrypted: false);

        messageInput = string.Empty;
    }

    private bool AreTopicNameAndUsernameValid()
    {
        bool isMyNameWellformed = !string.IsNullOrWhiteSpace(myUsername);
        bool isTopicNameWellformed = !string.IsNullOrWhiteSpace(topicName);

        return isMyNameWellformed && isTopicNameWellformed;
    }
}
