@page "/signup"
@using Ethachat.Client.Pages.AccountManagement.LogicHandlers;
@using Ethachat.Client.UIComponents.InputForms.Registration
@using EthachatShared.Models.Authentication.Models;
@using EthachatShared.Models.Authentication.Models.UserAuthentication;
@using Ethachat.Client.Pages.WebAuthn;
@using Ethachat.Client.Services.HubServices.CommonServices.SubscriptionService
@using Ethachat.Client.Services.HubServices.HubServices.Implementations.AuthService
@using Ethachat.Client.Services.UserAgentService
@inject ILoginHandler _loginHandler
@inject NavigationManager _navigationManager
@inject IUserAgentService _userAgentService
@inject IAuthService _authService
@inject IHubServiceSubscriptionManager _hubServiceSubscriptionManager
@implements IDisposable;

<PageTitle>Sign Up</PageTitle>

<div>
    <div class="container text-center">
        <div class="row mt-5">
            <div class="col-md-6 offset-md-3">
                <div class="card">
                    <div class="card-header">
                        <h2 class="text-center">Account Registration</h2>
                    </div>
                    <div class="card-body">
                        <div class="form-group text-center">
                            <p>Choose a registration method:</p>
                            <div class="btn-group" data-toggle="buttons">
                                <label class="btn mb-3 border-dark" style=@(IsWebAuthnUsed ? "background-color: #712cf9;" : "background-color: white; color: black;")>
                                    <input @onclick=@(() => IsWebAuthnUsed = true) type="radio" name="registrationType" id="webAuthnRadio" checked=@(IsWebAuthnUsed)> Passwordless
                                </label>
                                <label class="btn mb-3 border-dark" style=@(IsWebAuthnUsed ? "background-color: white; color: black;" : "background-color: #712cf9;")>
                                    <input @onclick=@(() => IsWebAuthnUsed = false) type="radio" name="registrationType" id="loginPasswordRadio" checked=@(!IsWebAuthnUsed)> With Password
                                </label>
                            </div>
                        </div>

                        @if (IsWebAuthnUsed)
                        {
                            <Authentication
                                IsRegisterFormVisible="true"/>
                        }
                        else
                        {
                            <RegistrationForm
                                OnRegisterEvent="async (dto) => await OnRegister(dto)"
                                RegistrationAttemptResult="lastRegisterAttemptResult"/>
                        }
                    </div>
                    <div class="on-registration-success" style="display: none; padding: 10px;">
                        <span>Done!</span>
                        <span>You can 
                            <a href="/signin">
                                login
                            </a>
                            now
                        </span>
                        <Icon Name="IconName.CheckCircleFill" Color="IconColor.Success"/>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>


@code {
    private AuthResult lastRegisterAttemptResult { get; set; } = new();
    private UserAuthentication? lastRegisterDTO { get; set; }
    private bool IsWebAuthnUsed { get; set; } = true;
    private Guid ComponentId { get; set; }
    
    public void Dispose() => _hubServiceSubscriptionManager.RemoveComponentCallbacks(ComponentId);

    protected override void OnInitialized()
    {
        ComponentId = Guid.NewGuid();
        
        _hubServiceSubscriptionManager
            .AddCallback<AuthResult>(OnRegisterResponse, "OnRegister", ComponentId);
        base.OnInitialized();
    }

    private async Task OnRegister(UserAuthentication newUserDTO)
    {
        var userAgentInformation = await _userAgentService.GetUserAgentInformation();
        newUserDTO.UserAgent = userAgentInformation.UserAgentDescription ?? string.Empty;
        newUserDTO.UserAgentId = userAgentInformation.UserAgentId;
        
        lastRegisterDTO = newUserDTO;

        await _authService.Register(newUserDTO);
    }

    private void OnRegisterResponse(AuthResult result)
    {
        lastRegisterAttemptResult = result;
        
        if (result.Result is AuthResultType.Success)
            LogInAndRedirect(result);
        else
            StateHasChanged();
    }

    private void LogInAndRedirect(AuthResult result)
    {
        if (result.Result == AuthResultType.Success && lastRegisterDTO is not null)
        {
            _loginHandler.OnLogIn(lastRegisterDTO, ((authResult) =>
            {
                if (authResult.Result == AuthResultType.Success)
                    _navigationManager.NavigateTo("/users");
            }));
        }
    }
}