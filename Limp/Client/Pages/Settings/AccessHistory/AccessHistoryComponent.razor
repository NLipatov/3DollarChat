@page "/settings/accesses"
@using Ethachat.Client.Services.HubServices.CommonServices.SubscriptionService
@using Ethachat.Client.Services.UserAgent.Models
@using Ethachat.Client.Services.UserAgentService
@using EthachatShared.Models.Authentication.Enums
@using EthachatShared.Models.Authentication.Models
@using Ethachat.Client.Pages.AuthenticationChecks
@using Ethachat.Client.Services.AuthenticationService.Handlers
@using Ethachat.Client.Services.HubServices.HubServices.Implementations.AuthService
@inject IAuthService _authService 
@inject IHubServiceSubscriptionManager _hubServiceSubscriptionManager
@inject IJSRuntime _jS
@inject IUserAgentService _userAgentService
@inject IAuthenticationHandler AuthenticationHandler
@implements IDisposable

<AuthenticatedView>
    <AuthenticatedContent>
        <div class="p-2">
            <div>
                <Callout Type="CalloutType.Info">
                    This is a list of JWT-token renewal history for your account.
                </Callout>
            </div>
            <div>
                <Grid TItem="AccessRefreshEventLog"
                      Class="table table-hover table-bordered table-striped"
                      Data="_tokenRenewalRecords"
                      AllowSorting="true">

                    <GridColumn
                        TItem="AccessRefreshEventLog"
                        HeaderText="User Agent"
                        SortKeySelector="item => item.UserAgent">
                        @context.UserAgent
                    </GridColumn>

                    <GridColumn
                        TItem="AccessRefreshEventLog"
                        HeaderText="User Agent Id"
                        SortKeySelector="item => item.UserAgentId">
                        @(UserAgentInformation?.UserAgentId == context.UserAgentId ? "Same agent" : "Different agent")
                    </GridColumn>

                    <GridColumn
                        TItem="AccessRefreshEventLog"
                        HeaderText="Access request reason"
                        SortKeySelector="item => item.IssueReason">
                        @(InterpretateAccessRefreshReason(context.IssueReason))
                    </GridColumn>

                    <GridColumn
                        TItem="AccessRefreshEventLog"
                        HeaderText="Date"
                        SortKeySelector="item => item.DateTime">
                        @context.DateTime.ToLocalTime().ToString("f")
                    </GridColumn>
                </Grid>
            </div>
        </div>
    </AuthenticatedContent>
        <UnauthenticatedContent>
            <UnAuthorized/>
        </UnauthenticatedContent>
    </AuthenticatedView>
@code {
    private Guid ComponentId { get; set; }
    private List<AccessRefreshEventLog> _tokenRenewalRecords = new ();
    private UserAgentInformation? UserAgentInformation { get; set; }
    
    public void Dispose() => _hubServiceSubscriptionManager.RemoveComponentCallbacks(ComponentId);

    protected override async Task OnInitializedAsync()
    {
        //Shortcut for cases when user was not yet authenticated
        if (string.IsNullOrWhiteSpace(await AuthenticationHandler.GetAccessCredential())) return;

        //This id will be needed on dispose stage
        //On dispose stage we need to clear out all of the component event subscriptions
        ComponentId = Guid.NewGuid();

        UserAgentInformation = await _userAgentService.GetUserAgentInformation();
        
        _hubServiceSubscriptionManager
            .AddCallback<List<AccessRefreshEventLog>>(UpdateHistories, "OnRefreshTokenHistoryResponse", ComponentId);
        
        await _authService.GetRefreshTokenHistory();
    }

    private string InterpretateAccessRefreshReason(JwtIssueReason issueReason)
    {
        return issueReason switch
        {
            JwtIssueReason.Login => "Login",
            JwtIssueReason.RefreshToken => "Refresh token",
            JwtIssueReason.NotActualised => "Not actualised",
            _ => "Undefined"
        };
    }

    private void UpdateHistories(List<AccessRefreshEventLog> histories)
    {
        _tokenRenewalRecords = histories;
        StateHasChanged();
    }
}