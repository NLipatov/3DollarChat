@using Ethachat.Client.UI.Shared.ReuseableComponents.EditableList.Models
@using Ethachat.Client.UI.Shared.Icon

<div class="p-2" style="
        background-color: white;">
    <div style="
            display: flex;
            justify-content: space-between;">
        <h1>@ListHeader</h1>
        <Button Color="ButtonColor.Primary"
                Outline="true"
                @onclick="ToggleContactEditionMode">
            @(EditionMode ? "Done" : "Edit")
        </Button>
    </div>
    <div>
        <Virtualize Items="@itemCollection" Context="item">
            <div style="align-items: baseline; gap: 10px; display: flex;"
                 @onclick:preventDefault="true"
                 @onclick=@(async () => { await OnItemRemoved.InvokeAsync(item);})>
                <div style="display: @(EditionMode ? "" : "none");">
                    <CustomIcon
                        Color="red"
                        Name="circle-minus"
                        CursorPointer="true"/>
                </div>

                <EditableListItem
                    OnItemClickedAction=@((itemName) => OnItemClicked.InvokeAsync(item))
                    ItemModel="item"
                    IconClass=@IconClass
                    Style="width: 100%; margin-top: 10px;"/>
            </div>
        </Virtualize>
    </div>
</div>

@code {
    [Parameter] public string? IconClass { get; set; } = string.Empty;

    [Parameter] public string ListHeader { get; set; } = "Items";

    [Parameter] public bool EditionMode { get; set; } = false;

    [Parameter] public List<ItemModel> itemCollection { get; set; } = new();

    [Parameter] public EventCallback<ItemModel> OnItemRemoved { get; set; }

    [Parameter] public EventCallback<ItemModel> OnItemClicked { get; set; }

    private void ToggleContactEditionMode()
    {
        EditionMode = !EditionMode;
        StateHasChanged();
    }
}