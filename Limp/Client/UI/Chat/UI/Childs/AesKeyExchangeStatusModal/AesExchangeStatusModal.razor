@using EthachatShared.Models.ConnectedUsersManaging
@using EthachatShared.Encryption
@using global::Client.Application.Cryptography.KeyStorage
@using global::Client.Infrastructure.Cryptography.Handlers
@inherits Ethachat.Client.UI.CommonComponents.BaseComponents.BaseEventListeningComponent
@inject IJSRuntime jSRuntime
@inject IKeyStorage<AesHandler> AesKeyStorage

@if (!KeyExist)
{
    <div class="aes-exchange-modal">
        @if (IsPartnerOnline)
        {
            <div class="card-holder">
                <Card
                    Title="AES exchange"
                    Text="Now we are exchanging the key for encrypting messages"/>
            </div>
        }
        else
        {
            <div class="card-holder">
                <Card
                    Title="AES exchange"
                    Text="AES exchange is not possible - Your partner is offline"/>
            </div>
        }
    </div>
}

@code {
    [Parameter] public string PartnerUsername { get; set; } = string.Empty;
    [Parameter] public bool IsPartnerOnline { get; set; }
    private bool KeyExist { get; set; }

    protected override void SubscribeToHubEvents()
    {
        base.SubscribeToHubEvents();
        HubServiceSubscriptionManager.AddCallback<UserConnectionsReport>(OnUsersOnlineUpdate, "ReceiveOnlineUsers", ComponentId);
        HubServiceSubscriptionManager.AddCallback<string>(OnAESUpdated, "AESUpdated", ComponentId);
    }

    protected override async Task OnInitializedAsync()
    {
        KeyExist = await AesKeyStorage.GetLastAcceptedAsync(PartnerUsername, KeyType.Aes) != null;
        await base.OnInitializedAsync();
    }

    private void OnUsersOnlineUpdate(UserConnectionsReport userConnectionsReport)
    {
        IsPartnerOnline = userConnectionsReport.UserConnections
            .Select(x => x.Username)
            .Contains(PartnerUsername);
    }

    private async Task OnAESUpdated(string _)
    {
        KeyExist = await AesKeyStorage.GetLastAcceptedAsync(PartnerUsername, KeyType.Aes) != null;
        StateHasChanged();
    }
}