@page "/register"
@using AuthAPI.DTOs.User;
@using System.Text.Json;
@using System.Text;
@inject IConfiguration _configuration;

<label>Login
    <input required @bind=Username @bind:event="oninput" />
</label>
<label>Password 
    <input required type="password" @bind=Password @bind:event="oninput"/>
</label>
<label>
    Password confirmation
    <input required type="password" @bind=PasswordConfirmation @bind:event="oninput" />
</label>

<button @onclick="ValidateAsync">
    Register
</button>

@if(isRegistered)
{
    <h2>
        Registered Succesfully!
    </h2>
}

@code {
    public string Username { get; set; }
    public string Password { get; set; }
    public string PasswordConfirmation { get; set; }

    public bool isRegistered { get; set; } = false;

    async Task ValidateAsync()
    {
        if(Password != PasswordConfirmation)
        {
            Console.WriteLine("Password not match Password Confirmation!");
        }
        else
        {
            await RegisterAsync();
        }
    }

    async Task RegisterAsync()
    {
        var data = new UserDTO()
        {
            Username = Username,
            Password = PasswordConfirmation,
        };

        var content = new StringContent(JsonSerializer.Serialize(data), Encoding.UTF8, "application/json");

        HttpClient client = new();
        var response = await client.PostAsync(_configuration["AuthAutority:Address"] + _configuration["AuthAutority:Endpoints:Register"],
        content);

        //var response = await client.PostAsJsonAsync(_configuration["AuthAutority:Address"] + _configuration["AuthAutority:Endpoints:Register"],
        //new StringContent(JsonSerializer.Serialize(data), Encoding.UTF8, "application/json"));

        if(response.IsSuccessStatusCode)
        {
            isRegistered = true;
        }
    }
}