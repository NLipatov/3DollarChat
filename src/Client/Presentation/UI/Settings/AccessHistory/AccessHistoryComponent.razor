@page "/settings/accesses"
@using Ethachat.Client.Services.Authentication.Handlers
@using Ethachat.Client.Services.HubServices.CommonServices.SubscriptionService
@using Ethachat.Client.Services.UserAgent.Models
@using EthachatShared.Models.Authentication.Enums
@using EthachatShared.Models.Authentication.Models
@using Ethachat.Client.UI.AuthenticationChecks
@using Ethachat.Client.Services.HubServices.HubServices.Implementations.AuthService
@using Ethachat.Client.Services.UserAgent
@inject IAuthService _authService 
@inject IHubServiceSubscriptionManager _hubServiceSubscriptionManager
@inject IUserAgentService _userAgentService
@inject IAuthenticationHandler AuthenticationHandler
@using Ethachat.Client.UI.Shared.Callout
@using CalloutType = Ethachat.Client.UI.Shared.Callout.CalloutType
@implements IDisposable

<AuthenticatedView>
    <AuthenticatedContent>
        <div class="p-2">
            <div>
                <CustomCallout
                    CalloutType="CalloutType.Info"
                    CalloutBody="This is a list of JWT-token renewal history for your account."/>
            </div>
            <div>
                @foreach (var item in _tokenRenewalRecords)
                {
                    <span>@item.UserAgent - @InterpretateAccessRefreshReason(item.IssueReason) - @item.DateTime.ToLocalTime().ToString("f")</span>
                }
            </div>
        </div>
    </AuthenticatedContent>
        <UnauthenticatedContent>
            <UnAuthorized/>
        </UnauthenticatedContent>
    </AuthenticatedView>
@code {
    private Guid ComponentId { get; set; }
    private List<AccessRefreshEventLog> _tokenRenewalRecords = new ();
    private UserAgentInformation? UserAgentInformation { get; set; }
    
    public void Dispose() => _hubServiceSubscriptionManager.RemoveComponentCallbacks(ComponentId);

    protected override async Task OnInitializedAsync()
    {
        //Shortcut for cases when user was not yet authenticated
        if (string.IsNullOrWhiteSpace(await AuthenticationHandler.GetAccessCredential())) return;

        //This id will be needed on dispose stage
        //On dispose stage we need to clear out all of the component event subscriptions
        ComponentId = Guid.NewGuid();

        UserAgentInformation = await _userAgentService.GetUserAgentInformation();
        
        _hubServiceSubscriptionManager
            .AddCallback<List<AccessRefreshEventLog>>(UpdateHistories, "OnRefreshTokenHistoryResponse", ComponentId);
        
        await _authService.GetRefreshTokenHistory();
    }

    private string InterpretateAccessRefreshReason(JwtIssueReason issueReason)
    {
        return issueReason switch
        {
            JwtIssueReason.Login => "Login",
            JwtIssueReason.RefreshToken => "Refresh token",
            JwtIssueReason.NotActualised => "Not actualised",
            _ => "Undefined"
        };
    }

    private void UpdateHistories(List<AccessRefreshEventLog> histories)
    {
        _tokenRenewalRecords = histories;
        StateHasChanged();
    }
}