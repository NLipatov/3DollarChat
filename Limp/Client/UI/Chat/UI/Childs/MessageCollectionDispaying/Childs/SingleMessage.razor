@using Ethachat.Client.ClientOnlyModels;
@using Ethachat.Client.Services.HubServices.CommonServices.CallbackExecutor;
@using Ethachat.Client.Services.HubServices.CommonServices.SubscriptionService;
@using Ethachat.Client.Services.HubServices.HubServices.Implementations.MessageService
@using Ethachat.Client.Services.HubServices.HubServices.Implementations.MessageService.Implementation.Handlers.PackageForming
@using Ethachat.Client.Services.InboxService;
@using EthachatShared.Models.Message;
@using Ethachat.Client.UI.Chat.UI.Childs.MessageCollectionDispaying.Extensions
@inject ICallbackExecutor CallbackExecutor
@inject IMessageBox MessageBox
@inject IMessageService MessageService
@inject IHubServiceSubscriptionManager HubServiceSubscriptionManager
@inject IJSRuntime JsRuntime
@inject IPackageMultiplexerService PackageMultiplexerService
@using Ethachat.Client.UI.Chat.UI.Childs.MessageCollectionDispaying.Childs.SingleMessagesByType
@using Ethachat.Client.UI.Shared.ReuseableComponents
@implements IDisposable

@if (Message != null)
{
    <div class="message @_messageClass">
        <div class="message-text">
            @if (Message.Type is MessageType.BlobLink && Message.Metadata!.ContentType.Contains("image"))
            {
                <img style="max-width: 100%;" src="@Message.BlobLink" alt="image that user sent to you"/>
            }
            else if (Message.Type is MessageType.BlobLink && Message.Metadata!.ContentType.Contains("video"))
            {
                <video controls="controls" style="max-width: 100%;">
                    <source src="@Message.BlobLink" type="video/mp4">
                </video>
            }
            else if (Message.Type is MessageType.HLSPlaylist)
            {
                <HlsVideoStreamMessage Message=@Message/>
            }
            else if (!string.IsNullOrWhiteSpace(Message.BlobLink))
            {
                <div>
                    <a
                        href="@Message.BlobLink"
                        download="@Message.Metadata!.Filename"
                        style="text-decoration: none;">
                        <i class="bi bi-cloud-download-fill"></i>
                        <span>@Message.Metadata?.Filename</span>
                    </a>
                </div>
            }

            @if (!string.IsNullOrWhiteSpace(Message.PlainText))
            {
                @(Message.PlainText
                    .AsMarkupString()
                    .FormatLinks())
            }
        </div>
        <div class="message-footer">
            <span>@Message.DateSent.ToLocalTime().ToString("HH:mm")</span>
            @if (Message.Sender == MyUsername)
            {
                @if (Message.Sender == MyUsername)
                {
                    @if (Message.IsSeen)
                    {
                        //Wrapping i in span tag solves "Cannot read property 'removeChild' of null" error.
                        //issue reference: https://stackoverflow.com/a/64686984
                        <span>
                            <i class="fas fa-check-double @_messageClass"></i>
                        </span>
                    }
                    else if (Message.IsRegisteredByHub)
                    {
                        if (Message.IsDelivered)
                        {
                            //Wrapping i in span tag solves "Cannot read property 'removeChild' of null" error.
                            //issue reference: https://stackoverflow.com/a/64686984
                            <span>
                                <i class="fas fa-check @_messageClass"></i>
                            </span>
                        }
                        else
                        {
                            <span>
                                <i class="bi bi-database-check @_messageClass"></i>
                            </span>
                        }
                    }
                }
            }
            @if (Message.Packages.Any())
            {
                <span @onclick="() => MessageBox.Delete(Message)">
                    <Icon Name="IconName.TrashFill" Style="color: red;"></Icon>
                </span>
            }
        </div>
        <OnObservedTrigger 
            Callback=@(async () => await MessageService.NotifySenderThatMessageWasReaded(Message.Id, Message.Sender!, MyUsername!))/>
    </div>
}

@code {
    [Parameter] public EventCallback<ClientMessage> OnResend { get; set; }

    [Parameter] public ClientMessage? Message { get; set; }

    [Parameter] public string? MyUsername { get; set; }

    private bool _isOutcoming;
    private string _messageClass = string.Empty;
    private Guid ComponentId { get; set; }
    private int ChunksLoaded { get; set; } = 0;

    public void Dispose()
    {
        HubServiceSubscriptionManager.RemoveComponentCallbacks(ComponentId);
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        
        ComponentId = Guid.NewGuid();

        SubscribeToHubEvents();
    }

    private void SubscribeToHubEvents()
    {
        HubServiceSubscriptionManager.AddCallback<Guid>(id =>
        {
            MessageBox.OnDelivered(id);
            StateHasChanged();
        }, "OnFileReceived", ComponentId);

        HubServiceSubscriptionManager.AddCallback<Guid>(((id) =>
        {
            MessageBox.OnDelivered(id);
            MessageBox.OnSeen(id);
            StateHasChanged();
        }), "OnReceiverMarkedMessageAsRead", ComponentId);

        HubServiceSubscriptionManager.AddCallback<Guid>((fileId) =>
        {
            if (Message?.Metadata?.DataFileId != fileId)
                return;

            if (ChunksLoaded + 1 > Message.Metadata.ChunksCount)
                return;

            ChunksLoaded += 1;
            StateHasChanged();
        }, "OnChunkLoaded", ComponentId);

        HubServiceSubscriptionManager.AddCallback<Guid>((id) =>
        {
            MessageBox.OnDelivered(id);
            StateHasChanged();
        }, "OnReceiverMarkedMessageAsReceived", ComponentId);
    }

    protected override async Task OnParametersSetAsync()
    {
        _isOutcoming = Message?.Sender == MyUsername;
        _messageClass = _isOutcoming ? "outcoming" : "incoming";

        await base.OnParametersSetAsync();
    }

}